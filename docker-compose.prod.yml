version: '3.8'

services:
  # StokCerdas API Application with Python ML Support
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-1.0.0}
    container_name: stokcerdas-app
    restart: unless-stopped
    environment:
      # Core Application
      - NODE_ENV=production
      - PORT=3000
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      
      # Database
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      
      # RabbitMQ
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Python ML Environment
      - PYTHON_PATH=/app/src/ml-forecasting/python
      - PYTHON_VENV_PATH=/app/venv
      - PYTHON_EXECUTABLE=/app/venv/bin/python
      - PYTHON_TIMEOUT=300
      - PYTHON_MAX_RETRIES=3
      - PYTHON_HEALTH_CHECK_INTERVAL=60
      
      # ML Model Configuration
      - ML_MODEL_CACHE_TTL=3600
      - ML_MODEL_CACHE_SIZE=100
      - ML_FORECAST_MAX_STEPS=90
      - ML_FORECAST_DEFAULT_CONFIDENCE=0.95
      - ML_MODEL_RETRAINING_INTERVAL=86400
      
      # ARIMA Configuration
      - ARIMA_MAX_ORDER_P=5
      - ARIMA_MAX_ORDER_D=2
      - ARIMA_MAX_ORDER_Q=5
      - ARIMA_SEASONAL_ENABLED=true
      - ARIMA_AUTO_SELECTION=true
      
      # Prophet Configuration
      - PROPHET_SEASONALITY_MODE=multiplicative
      - PROPHET_YEARLY_SEASONALITY=true
      - PROPHET_WEEKLY_SEASONALITY=true
      - PROPHET_DAILY_SEASONALITY=false
      - PROPHET_HOLIDAYS_ENABLED=true
      - PROPHET_MCMC_SAMPLES=0
      - PROPHET_UNCERTAINTY_SAMPLES=1000
      
      # XGBoost Configuration
      - XGBOOST_MAX_DEPTH=6
      - XGBOOST_LEARNING_RATE=0.1
      - XGBOOST_N_ESTIMATORS=100
      - XGBOOST_SUBSAMPLE=0.8
      - XGBOOST_COLSAMPLE_BYTREE=0.8
      - XGBOOST_TREE_METHOD=hist
      - XGBOOST_VERBOSITY=0
      
      # Indonesian Business Context
      - INDONESIAN_HOLIDAYS_ENABLED=true
      - INDONESIAN_BUSINESS_CALENDAR=true
      - INDONESIAN_PAYDAY_EFFECTS=true
      - INDONESIAN_RAMADAN_EFFECTS=true
      - INDONESIAN_TIMEZONE=Asia/Jakarta
      - DEFAULT_LANGUAGE=id
      - DEFAULT_TIMEZONE=Asia/Jakarta
      - DEFAULT_CURRENCY=IDR
      
      # ML Performance Optimization
      - ML_WORKER_PROCESSES=2
      - ML_QUEUE_CONCURRENCY=3
      - ML_MEMORY_LIMIT=2048
      - ML_PROCESS_TIMEOUT=600
      - ML_PARALLEL_PROCESSING=true
      
      # Feature Flags
      - FEATURE_AI_FORECASTING=true
      - FEATURE_MULTI_CHANNEL=true
      - FEATURE_ADVANCED_REPORTING=true
      - FEATURE_MOBILE_APP=true
      
      # Logging
      - LOG_LEVEL=warn
      - LOG_FORMAT=json
      
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - stokcerdas-network
    volumes:
      - app_logs:/app/logs
      - ml_models:/app/models
      - ml_cache:/app/cache
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1.5G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stokcerdas-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - stokcerdas-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: stokcerdas-redis-prod
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - stokcerdas-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # RabbitMQ for Message Queuing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: stokcerdas-rabbitmq-prod
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.prod.conf:/etc/rabbitmq/rabbitmq.conf
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - stokcerdas-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: stokcerdas-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - stokcerdas-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  app_logs:
    driver: local
  ml_models:
    driver: local
  ml_cache:
    driver: local

# Network for service communication
networks:
  stokcerdas-network:
    driver: bridge
    name: stokcerdas-network-prod