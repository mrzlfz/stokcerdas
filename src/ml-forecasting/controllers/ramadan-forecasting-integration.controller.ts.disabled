import {
  Controller,
  Get,
  Post,
  Body,
  Query,
  Param,
  HttpCode,
  HttpStatus,
  UseGuards,
  Logger,
  BadRequestException,
  NotFoundException
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiParam, ApiBearerAuth } from '@nestjs/swagger';
import { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';
import { CurrentTenant } from '../../auth/decorators/current-tenant.decorator';
import { RamadanForecastingIntegrationService, RamadanForecastingRequest, RamadanForecastingResult } from '../services/ramadan-forecasting-integration.service';

@ApiTags('Ramadan Forecasting Integration')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller('ml-forecasting/ramadan-integration')
export class RamadanForecastingIntegrationController {
  private readonly logger = new Logger(RamadanForecastingIntegrationController.name);

  constructor(
    private readonly ramadanForecastingIntegrationService: RamadanForecastingIntegrationService,
  ) {}

  @Post('comprehensive-forecast')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Generate comprehensive Ramadan-aware forecast',
    description: 'Creates a comprehensive forecast that integrates all specialized Ramadan learning services for accurate cultural and behavioral predictions'
  })
  @ApiResponse({
    status: 200,
    description: 'Comprehensive Ramadan forecast generated successfully',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            forecastId: { type: 'string', example: 'ramadan_forecast_1234567890_abc123' },
            tenantId: { type: 'string' },
            generatedAt: { type: 'string', format: 'date-time' },
            forecastPeriod: {
              type: 'object',
              properties: {
                startDate: { type: 'string', format: 'date' },
                endDate: { type: 'string', format: 'date' },
                containsRamadan: { type: 'boolean' },
                ramadanPeriods: { type: 'array', items: { type: 'object' } }
              }
            },
            comprehensiveForecast: {
              type: 'object',
              properties: {
                dailyForecasts: { type: 'array', items: { type: 'object' } },
                weeklyForecasts: { type: 'array', items: { type: 'object' } },
                hourlyForecasts: { type: 'array', items: { type: 'object' } }
              }
            },
            ramadanSpecificInsights: { type: 'object' },
            businessRecommendations: { type: 'object' },
            qualityMetrics: { type: 'object' },
            validationResults: { type: 'object' }
          }
        },
        meta: {
          type: 'object',
          properties: {
            processingTime: { type: 'number' },
            servicesIntegrated: { type: 'array', items: { type: 'string' } },
            confidence: { type: 'number' }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Invalid forecast request parameters' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 500, description: 'Internal server error during forecast generation' })
  async generateComprehensiveForecast(
    @CurrentTenant() tenantId: string,
    @Body() request: {
      businessType?: string;
      region?: string;
      productId?: string;
      category?: string;
      forecastStartDate: string;
      forecastEndDate: string;
      includeTimeOfDayAnalysis?: boolean;
      includeCategoryBehaviorAnalysis?: boolean;
      includeWeeklyProgressionAnalysis?: boolean;
      granularity: 'daily' | 'weekly' | 'hourly';
      confidenceLevel?: number;
    }
  ) {
    const startTime = Date.now();
    
    try {
      this.logger.log(`Generating comprehensive Ramadan forecast for tenant: ${tenantId}`);

      // Validate request parameters
      if (!request.forecastStartDate || !request.forecastEndDate) {
        throw new BadRequestException('Forecast start and end dates are required');
      }

      const forecastStartDate = new Date(request.forecastStartDate);
      const forecastEndDate = new Date(request.forecastEndDate);

      if (forecastStartDate >= forecastEndDate) {
        throw new BadRequestException('Forecast start date must be before end date');
      }

      const forecastRequest: RamadanForecastingRequest = {
        tenantId,
        businessType: request.businessType,
        region: request.region,
        productId: request.productId,
        category: request.category,
        forecastStartDate,
        forecastEndDate,
        includeTimeOfDayAnalysis: request.includeTimeOfDayAnalysis,
        includeCategoryBehaviorAnalysis: request.includeCategoryBehaviorAnalysis,
        includeWeeklyProgressionAnalysis: request.includeWeeklyProgressionAnalysis,
        granularity: request.granularity,
        confidenceLevel: request.confidenceLevel
      };

      const result = await this.ramadanForecastingIntegrationService.generateRamadanForecast(forecastRequest);
      const processingTime = Date.now() - startTime;

      const servicesIntegrated = [];
      if (result.ramadanSpecificInsights.overallRamadanImpact.confidence > 0.5) servicesIntegrated.push('Core Ramadan Patterns');
      if (result.ramadanSpecificInsights.timeOfDayInsights.overallTimeShifts) servicesIntegrated.push('Time-of-Day Analysis');
      if (result.ramadanSpecificInsights.categorySpecificInsights.length > 0) servicesIntegrated.push('Category Behavior Analysis');

      return {
        success: true,
        data: result,
        meta: {
          processingTime,
          servicesIntegrated,
          confidence: result.qualityMetrics.overallConfidence
        }
      };

    } catch (error) {
      this.logger.error(`Comprehensive forecast generation failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  @Get('quick-multiplier')
  @ApiOperation({
    summary: 'Get quick Ramadan multiplier for specific date',
    description: 'Returns a quick Ramadan multiplier for forecasting adjustments on a specific date'
  })
  @ApiQuery({ name: 'date', description: 'Target date for multiplier (YYYY-MM-DD)', required: true })
  @ApiQuery({ name: 'businessType', description: 'Business type for context', required: false })
  @ApiQuery({ name: 'category', description: 'Product category for specific analysis', required: false })
  @ApiQuery({ name: 'region', description: 'Regional context', required: false })
  @ApiResponse({
    status: 200,
    description: 'Quick Ramadan multiplier retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            multiplier: { type: 'number', example: 1.8 },
            confidence: { type: 'number', example: 0.85 },
            explanation: { type: 'string', example: 'Ramadan Week 2 pattern applied with category-specific adjustments' },
            ramadanStatus: { type: 'string', example: 'ramadan_week_2' },
            appliedFactors: { type: 'array', items: { type: 'string' } }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Invalid date parameter' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  async getQuickRamadanMultiplier(
    @CurrentTenant() tenantId: string,
    @Query('date') dateString: string,
    @Query('businessType') businessType?: string,
    @Query('category') category?: string,
    @Query('region') region?: string
  ) {
    try {
      if (!dateString) {
        throw new BadRequestException('Date parameter is required');
      }

      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        throw new BadRequestException('Invalid date format. Use YYYY-MM-DD');
      }

      this.logger.debug(`Getting quick Ramadan multiplier for ${dateString}, tenant: ${tenantId}`);

      const result = await this.ramadanForecastingIntegrationService.getRamadanForecastMultiplier(
        tenantId,
        date,
        businessType,
        category,
        region
      );

      // Determine applied factors based on explanation
      const appliedFactors = [];
      if (result.explanation.includes('weekly')) appliedFactors.push('Weekly Progression');
      if (result.explanation.includes('time')) appliedFactors.push('Time-of-Day Effects');
      if (result.explanation.includes('category')) appliedFactors.push('Category Behavior');
      if (result.explanation.includes('cultural')) appliedFactors.push('Cultural Factors');

      return {
        success: true,
        data: {
          multiplier: result.multiplier,
          confidence: result.confidence,
          explanation: result.explanation,
          ramadanStatus: result.explanation.includes('Ramadan') ? 'ramadan_period' : 'normal',
          appliedFactors
        }
      };

    } catch (error) {
      this.logger.error(`Quick multiplier retrieval failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  @Get('ramadan-periods/:year')
  @ApiOperation({
    summary: 'Get Ramadan periods for specific year',
    description: 'Returns Ramadan period information for forecasting purposes'
  })
  @ApiParam({ name: 'year', description: 'Year to get Ramadan periods for', type: 'number' })
  @ApiResponse({
    status: 200,
    description: 'Ramadan periods retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            year: { type: 'number', example: 2024 },
            ramadanPeriods: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  startDate: { type: 'string', format: 'date' },
                  endDate: { type: 'string', format: 'date' },
                  lebaranDate: { type: 'string', format: 'date' },
                  weeklyBreakdown: { type: 'array', items: { type: 'object' } }
                }
              }
            },
            businessImplications: { type: 'array', items: { type: 'string' } }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Invalid year parameter' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  async getRamadanPeriods(
    @CurrentTenant() tenantId: string,
    @Param('year') year: number
  ) {
    try {
      if (!year || year < 2020 || year > 2030) {
        throw new BadRequestException('Invalid year. Must be between 2020 and 2030');
      }

      this.logger.debug(`Getting Ramadan periods for year ${year}, tenant: ${tenantId}`);

      // Quick forecast request to get Ramadan periods
      const startDate = new Date(`${year}-01-01`);
      const endDate = new Date(`${year}-12-31`);

      const quickRequest: RamadanForecastingRequest = {
        tenantId,
        forecastStartDate: startDate,
        forecastEndDate: endDate,
        granularity: 'weekly'
      };

      const result = await this.ramadanForecastingIntegrationService.generateRamadanForecast(quickRequest);

      const businessImplications = [
        'Plan inventory increases 2-3 weeks before Ramadan starts',
        'Adjust operating hours for pre-iftar and post-iftar shopping patterns',
        'Prepare for 30-50% increase in food and beverage categories',
        'Focus on family-oriented promotions and bundles',
        'Ensure adequate staffing during peak shopping periods'
      ];

      return {
        success: true,
        data: {
          year,
          ramadanPeriods: result.forecastPeriod.ramadanPeriods,
          businessImplications
        }
      };

    } catch (error) {
      this.logger.error(`Ramadan periods retrieval failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  @Post('business-recommendations')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Get Ramadan business recommendations',
    description: 'Generate comprehensive business recommendations for Ramadan period based on integrated analysis'
  })
  @ApiResponse({
    status: 200,
    description: 'Business recommendations generated successfully',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            inventoryManagement: { type: 'array', items: { type: 'object' } },
            staffingRecommendations: { type: 'array', items: { type: 'object' } },
            promotionalOpportunities: { type: 'array', items: { type: 'object' } },
            operationalAdjustments: { type: 'array', items: { type: 'object' } },
            riskMitigation: { type: 'array', items: { type: 'object' } }
          }
        },
        meta: {
          type: 'object',
          properties: {
            analysisType: { type: 'string' },
            confidence: { type: 'number' },
            applicabilityPeriod: { type: 'string' }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'Invalid request parameters' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  async getBusinessRecommendations(
    @CurrentTenant() tenantId: string,
    @Body() request: {
      businessType?: string;
      region?: string;
      categories?: string[];
      ramadanYear?: number;
      includeRiskAnalysis?: boolean;
    }
  ) {
    try {
      this.logger.log(`Generating Ramadan business recommendations for tenant: ${tenantId}`);

      const currentYear = new Date().getFullYear();
      const ramadanYear = request.ramadanYear || currentYear;
      
      // Create forecast request for recommendation analysis
      const forecastRequest: RamadanForecastingRequest = {
        tenantId,
        businessType: request.businessType,
        region: request.region,
        category: request.categories?.[0], // Use first category for primary analysis
        forecastStartDate: new Date(`${ramadanYear}-01-01`),
        forecastEndDate: new Date(`${ramadanYear}-12-31`),
        includeCategoryBehaviorAnalysis: true,
        includeWeeklyProgressionAnalysis: true,
        granularity: 'weekly'
      };

      const result = await this.ramadanForecastingIntegrationService.generateRamadanForecast(forecastRequest);

      return {
        success: true,
        data: result.businessRecommendations,
        meta: {
          analysisType: 'Integrated Ramadan Analysis',
          confidence: result.qualityMetrics.overallConfidence,
          applicabilityPeriod: `Ramadan ${ramadanYear} and surrounding periods`
        }
      };

    } catch (error) {
      this.logger.error(`Business recommendations generation failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  @Get('validation/accuracy')
  @ApiOperation({
    summary: 'Get forecast accuracy validation',
    description: 'Returns accuracy metrics and validation results for Ramadan forecasting models'
  })
  @ApiQuery({ name: 'validationPeriod', description: 'Period for validation analysis', required: false })
  @ApiResponse({
    status: 200,
    description: 'Validation results retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            overallAccuracy: { type: 'number', example: 0.85 },
            ramadanSpecificAccuracy: { type: 'number', example: 0.82 },
            categoryBreakdown: { type: 'object' },
            temporalAccuracy: { type: 'object' },
            confidenceCalibration: { type: 'object' },
            improvementAreas: { type: 'array', items: { type: 'string' } }
          }
        }
      }
    }
  })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  async getValidationAccuracy(
    @CurrentTenant() tenantId: string,
    @Query('validationPeriod') validationPeriod?: string
  ) {
    try {
      this.logger.debug(`Getting validation accuracy for tenant: ${tenantId}`);

      // Mock validation results - in production, this would run actual validation
      const validationResults = {
        overallAccuracy: 0.85,
        ramadanSpecificAccuracy: 0.82,
        categoryBreakdown: {
          'Food Staples': 0.88,
          'Beverages': 0.84,
          'Clothing': 0.79,
          'Electronics': 0.81
        },
        temporalAccuracy: {
          'Week 1': 0.86,
          'Week 2': 0.84,
          'Week 3': 0.82,
          'Week 4': 0.85,
          'Post-Ramadan': 0.79
        },
        confidenceCalibration: {
          'High Confidence (>0.8)': 0.91,
          'Medium Confidence (0.6-0.8)': 0.83,
          'Low Confidence (<0.6)': 0.72
        },
        improvementAreas: [
          'Post-Ramadan recovery pattern accuracy',
          'Low-volume category predictions',
          'Regional variation modeling',
          'New product forecast during Ramadan'
        ]
      };

      return {
        success: true,
        data: validationResults
      };

    } catch (error) {
      this.logger.error(`Validation accuracy retrieval failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  @Get('health')
  @ApiOperation({
    summary: 'Health check for Ramadan forecasting integration',
    description: 'Returns health status of all integrated Ramadan learning services'
  })
  @ApiResponse({
    status: 200,
    description: 'Health status retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            overallHealth: { type: 'string', example: 'healthy' },
            services: {
              type: 'object',
              properties: {
                corePatternLearning: { type: 'string', example: 'healthy' },
                timePatternAnalysis: { type: 'string', example: 'healthy' },
                categoryBehaviorAnalysis: { type: 'string', example: 'healthy' },
                integrationLayer: { type: 'string', example: 'healthy' }
              }
            },
            lastUpdated: { type: 'string', format: 'date-time' },
            version: { type: 'string', example: '1.0.0' }
          }
        }
      }
    }
  })
  async getHealthStatus() {
    try {
      // Simple health check - in production, this would test all service connections
      const healthStatus = {
        overallHealth: 'healthy',
        services: {
          corePatternLearning: 'healthy',
          timePatternAnalysis: 'healthy',
          categoryBehaviorAnalysis: 'healthy',
          integrationLayer: 'healthy'
        },
        lastUpdated: new Date().toISOString(),
        version: '1.0.0'
      };

      return {
        success: true,
        data: healthStatus
      };

    } catch (error) {
      this.logger.error(`Health check failed: ${error.message}`, error.stack);
      return {
        success: false,
        data: {
          overallHealth: 'unhealthy',
          error: error.message
        }
      };
    }
  }
}