import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject } from '@nestjs/common';
import { Cache } from 'cache-manager';
import { EventEmitter2 } from '@nestjs/event-emitter';
import * as moment from 'moment-timezone';
import { mean, median, standardDeviation, quantile } from 'simple-statistics';

import { RamadanPatternLearningService } from './ramadan-pattern-learning.service';
import { RamadanTimePatternService } from './ramadan-time-pattern.service';
import { RamadanCategoryBehaviorService } from './ramadan-category-behavior.service';
import { HolidayEffectLearningService } from './holiday-effect-learning.service';
import { InventoryTransaction } from '../../inventory/entities/inventory-transaction.entity';
import { Product } from '../../products/entities/product.entity';

/**
 * PHASE 3.2.3.2.5: Ramadan Forecasting Integration ðŸŽ¯
 * 
 * Comprehensive integration service that combines all specialized Ramadan learning services
 * into a unified forecasting system. This service orchestrates complex Ramadan pattern analysis
 * to provide accurate, culturally-aware demand predictions for Indonesian businesses.
 */

export interface RamadanForecastingRequest {
  tenantId: string;
  businessType?: string;
  region?: string;
  productId?: string;
  category?: string;
  forecastStartDate: Date;
  forecastEndDate: Date;
  includeTimeOfDayAnalysis?: boolean;
  includeCategoryBehaviorAnalysis?: boolean;
  includeWeeklyProgressionAnalysis?: boolean;
  granularity: 'daily' | 'weekly' | 'hourly';
  confidenceLevel?: number; // 0.8, 0.9, 0.95
}

export interface RamadanForecastingResult {
  forecastId: string;
  tenantId: string;
  generatedAt: string;
  forecastPeriod: {
    startDate: string;
    endDate: string;
    containsRamadan: boolean;
    ramadanPeriods: RamadanPeriodForecast[];
  };
  
  comprehensiveForecast: {
    dailyForecasts: DailyRamadanForecast[];
    weeklyForecasts: WeeklyRamadanForecast[];
    hourlyForecasts?: HourlyRamadanForecast[];
  };
  
  ramadanSpecificInsights: {
    overallRamadanImpact: {
      expectedMultiplier: number;
      confidence: number;
      businessImpactLevel: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
    };
    weeklyProgression: {
      preparation: WeeklyProgressionInsight;
      earlyRamadan: WeeklyProgressionInsight;
      middleRamadan: WeeklyProgressionInsight;
      lateRamadan: WeeklyProgressionInsight;
      preLebaran?: WeeklyProgressionInsight;
    };
    timeOfDayInsights: {
      sahurImpact: TimeOfDayInsight;
      iftarImpact: TimeOfDayInsight;
      overallTimeShifts: boolean;
    };
    categorySpecificInsights: CategorySpecificInsight[];
  };
  
  businessRecommendations: {
    inventoryManagement: InventoryRecommendation[];
    staffingRecommendations: StaffingRecommendation[];
    promotionalOpportunities: PromotionalRecommendation[];
    operationalAdjustments: OperationalRecommendation[];
    riskMitigation: RiskMitigationRecommendation[];
  };
  
  qualityMetrics: {
    overallConfidence: number;
    forecastReliability: number;
    dataQuality: number;
    culturalAccuracy: number;
    predictiveAccuracy?: number; // Based on historical validation
  };
  
  validationResults: {
    historicalAccuracy: number;
    crossValidationScore: number;
    confidenceIntervals: {
      lower: number;
      upper: number;
      level: number;
    };
  };
}

export interface RamadanPeriodForecast {
  ramadanYear: number;
  startDate: string;
  endDate: string;
  lebaranDate: string;
  overallMultiplier: number;
  confidence: number;
  weeklyBreakdown: {
    weekNumber: number;
    phase: 'preparation' | 'early_ramadan' | 'middle_ramadan' | 'late_ramadan' | 'pre_lebaran';
    multiplier: number;
    keyInsights: string[];
  }[];
}

export interface DailyRamadanForecast {
  date: string;
  dayOfWeek: string;
  ramadanStatus: 'pre_ramadan' | 'ramadan_week_1' | 'ramadan_week_2' | 'ramadan_week_3' | 'ramadan_week_4' | 'ramadan_week_5' | 'post_ramadan' | 'normal';
  baselineForecast: number;
  ramadanAdjustedForecast: number;
  multiplier: number;
  confidence: number;
  contributingFactors: {
    weeklyEffect: number;
    timeOfDayEffect: number;
    categoryEffect: number;
    culturalEffect: number;
  };
  specialConsiderations: string[];
}

export interface WeeklyRamadanForecast {
  weekStartDate: string;
  weekEndDate: string;
  ramadanWeek?: number;
  phase?: 'preparation' | 'early_ramadan' | 'middle_ramadan' | 'late_ramadan' | 'pre_lebaran';
  totalForecast: number;
  averageDailyForecast: number;
  weekOverWeekChange: number;
  confidence: number;
  keyDrivers: string[];
  businessActions: string[];
}

export interface HourlyRamadanForecast {
  date: string;
  hour: number;
  timeSlot: string;
  timeSlotType: 'sahur_prep' | 'sahur_peak' | 'morning_post_sahur' | 'afternoon_pre_iftar' | 'iftar_prep' | 'iftar_peak' | 'evening_post_iftar' | 'late_evening' | 'regular';
  baselineHourlyForecast: number;
  ramadanAdjustedForecast: number;
  hourlyMultiplier: number;
  confidence: number;
  timingRecommendations: string[];
}

export interface WeeklyProgressionInsight {
  weekNumber: number;
  expectedMultiplier: number;
  confidence: number;
  mainCharacteristics: string[];
  businessOpportunities: string[];
  potentialChallenges: string[];
}

export interface TimeOfDayInsight {
  peakHours: string[];
  multiplierRange: { min: number; max: number };
  confidence: number;
  operationalImpact: 'very_high' | 'high' | 'medium' | 'low';
  businessRecommendations: string[];
}

export interface CategorySpecificInsight {
  category: string;
  ramadanMultiplier: number;
  confidence: number;
  behaviorType: 'necessity' | 'tradition' | 'social_pressure' | 'gift_giving' | 'religious_obligation';
  seasonalCharacteristics: string[];
  competitiveConsiderations: string[];
}

export interface InventoryRecommendation {
  category: string;
  recommendationType: 'increase_stock' | 'decrease_stock' | 'maintain_stock' | 'shift_timing' | 'add_variants';
  multiplier: number;
  timing: string;
  rationale: string;
  confidence: number;
}

export interface StaffingRecommendation {
  period: string;
  recommendation: 'increase_staff' | 'decrease_staff' | 'shift_schedules' | 'add_expertise' | 'training_focus';
  focus: 'customer_service' | 'inventory_management' | 'cultural_sensitivity' | 'rush_handling';
  details: string;
  priority: 'high' | 'medium' | 'low';
}

export interface PromotionalRecommendation {
  timing: string;
  promotionType: 'early_bird' | 'bulk_discount' | 'family_package' | 'traditional_bundle' | 'convenience_focus';
  targetCategories: string[];
  expectedImpact: number;
  culturalConsiderations: string[];
  implementation: string;
}

export interface OperationalRecommendation {
  area: 'hours_adjustment' | 'delivery_timing' | 'payment_methods' | 'customer_communication' | 'cultural_adaptation';
  recommendation: string;
  implementation: string;
  expectedBenefit: string;
  timeline: string;
}

export interface RiskMitigationRecommendation {
  riskType: 'stockout' | 'overstock' | 'timing_mismatch' | 'cultural_insensitivity' | 'operational_strain';
  riskLevel: 'high' | 'medium' | 'low';
  mitigation: string;
  monitoringPoints: string[];
  contingencyPlan: string;
}

@Injectable()
export class RamadanForecastingIntegrationService {
  private readonly logger = new Logger(RamadanForecastingIntegrationService.name);
  private readonly CACHE_TTL = 86400; // 24 hours
  private readonly INDONESIAN_TIMEZONE = 'Asia/Jakarta';

  constructor(
    @InjectRepository(InventoryTransaction)
    private readonly transactionRepository: Repository<InventoryTransaction>,
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
    @Inject(CACHE_MANAGER)
    private readonly cacheManager: Cache,
    private readonly eventEmitter: EventEmitter2,
    private readonly ramadanPatternLearningService: RamadanPatternLearningService,
    private readonly ramadanTimePatternService: RamadanTimePatternService,
    private readonly ramadanCategoryBehaviorService: RamadanCategoryBehaviorService,
    private readonly holidayEffectLearningService: HolidayEffectLearningService,
  ) {}

  /**
   * Generate comprehensive Ramadan-aware forecasts that integrate all specialized learning services
   */
  async generateRamadanForecast(request: RamadanForecastingRequest): Promise<RamadanForecastingResult> {
    const forecastId = `ramadan_forecast_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      this.logger.log(`Starting comprehensive Ramadan forecasting: ${forecastId} for tenant: ${request.tenantId}`);

      // Check if forecast period contains Ramadan
      const ramadanPeriods = await this.identifyRamadanPeriodsInForecast(request);
      const containsRamadan = ramadanPeriods.length > 0;

      // Generate baseline forecasts (without Ramadan adjustments)
      const baselineForecasts = await this.generateBaselineForecasts(request);

      // Apply comprehensive Ramadan adjustments if applicable
      let comprehensiveForecast;
      let ramadanSpecificInsights;
      let businessRecommendations;

      if (containsRamadan) {
        // Integrate all Ramadan learning services for comprehensive analysis
        const integratedRamadanAnalysis = await this.performIntegratedRamadanAnalysis(request, ramadanPeriods);
        
        // Apply Ramadan adjustments to baseline forecasts
        comprehensiveForecast = await this.applyRamadanAdjustments(baselineForecasts, integratedRamadanAnalysis, request);
        
        // Generate Ramadan-specific insights
        ramadanSpecificInsights = await this.generateRamadanSpecificInsights(integratedRamadanAnalysis, request);
        
        // Generate business recommendations
        businessRecommendations = await this.generateBusinessRecommendations(integratedRamadanAnalysis, comprehensiveForecast, request);
      } else {
        // Non-Ramadan period - use baseline forecasts with minimal adjustments
        comprehensiveForecast = baselineForecasts;
        ramadanSpecificInsights = this.generateNonRamadanInsights();
        businessRecommendations = this.generateNonRamadanRecommendations();
      }

      // Calculate quality metrics
      const qualityMetrics = await this.calculateForecastQualityMetrics(comprehensiveForecast, request, containsRamadan);

      // Perform validation
      const validationResults = await this.validateForecastAccuracy(comprehensiveForecast, request);

      const result: RamadanForecastingResult = {
        forecastId,
        tenantId: request.tenantId,
        generatedAt: new Date().toISOString(),
        forecastPeriod: {
          startDate: request.forecastStartDate.toISOString(),
          endDate: request.forecastEndDate.toISOString(),
          containsRamadan,
          ramadanPeriods: ramadanPeriods.map(period => this.formatRamadanPeriodForecast(period))
        },
        comprehensiveForecast,
        ramadanSpecificInsights,
        businessRecommendations,
        qualityMetrics,
        validationResults
      };

      // Cache the comprehensive results
      await this.cacheManager.set(`ramadan_forecast_${request.tenantId}`, result, this.CACHE_TTL);

      // Emit forecast completion event
      this.eventEmitter.emit('ramadan.forecast.generated', {
        forecastId,
        tenantId: request.tenantId,
        containsRamadan,
        confidence: qualityMetrics.overallConfidence
      });

      this.logger.log(`Comprehensive Ramadan forecasting completed: ${forecastId}`);
      return result;

    } catch (error) {
      this.logger.error(`Ramadan forecasting failed: ${error.message}`, error.stack);
      throw new Error(`Ramadan forecasting failed: ${error.message}`);
    }
  }

  /**
   * Perform integrated analysis using all specialized Ramadan learning services
   */
  private async performIntegratedRamadanAnalysis(
    request: RamadanForecastingRequest,
    ramadanPeriods: any[]
  ): Promise<any> {
    try {
      const integrationResults = {
        corePatterns: null,
        timePatterns: null,
        categoryBehaviors: null,
        holidayEffects: null
      };

      // 1. Core Ramadan Pattern Analysis
      try {
        const corePatternResult = await this.ramadanPatternLearningService.learnRamadanPatterns({
          tenantId: request.tenantId,
          businessType: request.businessType,
          region: request.region,
          categories: request.category ? [request.category] : undefined,
          analysisStartYear: moment().year() - 3,
          analysisEndYear: moment().year(),
          includeWeeklyProgression: request.includeWeeklyProgressionAnalysis !== false
        });
        
        integrationResults.corePatterns = corePatternResult;
        this.logger.debug(`Core Ramadan patterns analyzed: ${corePatternResult.learnedPatterns.length} patterns found`);
      } catch (error) {
        this.logger.warn(`Core pattern analysis failed: ${error.message}`);
      }

      // 2. Time-of-Day Pattern Analysis (if requested)
      if (request.includeTimeOfDayAnalysis) {
        try {
          const timePatternResult = await this.ramadanTimePatternService.analyzeSahurIftarPatterns({
            tenantId: request.tenantId,
            businessType: request.businessType,
            region: request.region,
            categories: request.category ? [request.category] : undefined,
            ramadanYear: moment().year(),
            analysisGranularity: 'hourly',
            includeGeoLocation: true,
            includeDayOfWeekEffect: true
          });
          
          integrationResults.timePatterns = timePatternResult;
          this.logger.debug(`Time-of-day patterns analyzed: Sahur confidence ${timePatternResult.sahurPattern.overallSahurEffect.confidence}, Iftar confidence ${timePatternResult.iftarPattern.overallIftarEffect.confidence}`);
        } catch (error) {
          this.logger.warn(`Time pattern analysis failed: ${error.message}`);
        }
      }

      // 3. Category-Specific Behavior Analysis (if requested)
      if (request.includeCategoryBehaviorAnalysis) {
        try {
          const categoryBehaviorResult = await this.ramadanCategoryBehaviorService.analyzeCategoryBehaviors({
            tenantId: request.tenantId,
            businessType: request.businessType,
            region: request.region,
            targetCategories: request.category ? [request.category] : undefined,
            ramadanYears: [moment().year() - 2, moment().year() - 1, moment().year()],
            includeSubcategories: true,
            includeSeasonalComparison: true,
            includeCrossCategoryEffects: true,
            analysisDepth: 'comprehensive'
          });
          
          integrationResults.categoryBehaviors = categoryBehaviorResult;
          this.logger.debug(`Category behaviors analyzed: ${categoryBehaviorResult.categoryPatterns.length} categories analyzed`);
        } catch (error) {
          this.logger.warn(`Category behavior analysis failed: ${error.message}`);
        }
      }

      // 4. General Holiday Effect Learning (as fallback/supplement)
      try {
        const holidayEffectResult = await this.holidayEffectLearningService.learnHolidayEffects({
          tenantId: request.tenantId,
          businessType: request.businessType,
          region: request.region,
          categories: request.category ? [request.category] : undefined,
          holidayName: 'Ramadan',
          analysisStartDate: moment().subtract(3, 'years').toDate(),
          analysisEndDate: moment().toDate()
        });
        
        integrationResults.holidayEffects = holidayEffectResult;
        this.logger.debug(`Holiday effects analyzed: ${holidayEffectResult.learnedEffects.length} effects learned`);
      } catch (error) {
        this.logger.warn(`Holiday effect analysis failed: ${error.message}`);
      }

      return integrationResults;

    } catch (error) {
      this.logger.error(`Integrated Ramadan analysis failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Apply comprehensive Ramadan adjustments to baseline forecasts
   */
  private async applyRamadanAdjustments(
    baselineForecasts: any,
    ramadanAnalysis: any,
    request: RamadanForecastingRequest
  ): Promise<any> {
    try {
      const adjustedForecasts = {
        dailyForecasts: [],
        weeklyForecasts: [],
        hourlyForecasts: request.granularity === 'hourly' ? [] : undefined
      };

      // Generate daily forecasts with Ramadan adjustments
      const forecastDates = this.generateForecastDates(request.forecastStartDate, request.forecastEndDate);
      
      for (const date of forecastDates) {
        const dailyForecast = await this.generateDailyRamadanForecast(
          date,
          baselineForecasts,
          ramadanAnalysis,
          request
        );
        adjustedForecasts.dailyForecasts.push(dailyForecast);
      }

      // Generate weekly aggregations
      adjustedForecasts.weeklyForecasts = this.aggregateToWeeklyForecasts(adjustedForecasts.dailyForecasts);

      // Generate hourly forecasts if requested
      if (request.granularity === 'hourly' && request.includeTimeOfDayAnalysis) {
        adjustedForecasts.hourlyForecasts = await this.generateHourlyRamadanForecasts(
          adjustedForecasts.dailyForecasts,
          ramadanAnalysis,
          request
        );
      }

      return adjustedForecasts;

    } catch (error) {
      this.logger.error(`Failed to apply Ramadan adjustments: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Generate a single day's Ramadan-adjusted forecast
   */
  private async generateDailyRamadanForecast(
    date: moment.Moment,
    baselineForecasts: any,
    ramadanAnalysis: any,
    request: RamadanForecastingRequest
  ): Promise<DailyRamadanForecast> {
    try {
      // Determine Ramadan status for this date
      const ramadanStatus = this.determineRamadanStatus(date, ramadanAnalysis);
      
      // Get baseline forecast for this date
      const baselineForecast = this.getBaselineForecastForDate(date, baselineForecasts);
      
      // Calculate contributing factors
      const contributingFactors = {
        weeklyEffect: 1.0,
        timeOfDayEffect: 1.0,
        categoryEffect: 1.0,
        culturalEffect: 1.0
      };

      let totalMultiplier = 1.0;
      let confidence = 0.8;
      const specialConsiderations = [];

      // Apply weekly progression effect
      if (ramadanAnalysis.corePatterns && ramadanStatus.includes('ramadan_week')) {
        const weekNumber = parseInt(ramadanStatus.split('_')[2]);
        const weeklyPattern = this.getWeeklyPattern(weekNumber, ramadanAnalysis.corePatterns);
        if (weeklyPattern) {
          contributingFactors.weeklyEffect = weeklyPattern.multiplier;
          totalMultiplier *= weeklyPattern.multiplier;
          confidence = Math.min(confidence, weeklyPattern.confidence);
          specialConsiderations.push(`Ramadan week ${weekNumber} pattern applied`);
        }
      }

      // Apply category-specific effect
      if (ramadanAnalysis.categoryBehaviors && request.category) {
        const categoryPattern = this.getCategoryPattern(request.category, ramadanAnalysis.categoryBehaviors);
        if (categoryPattern) {
          contributingFactors.categoryEffect = categoryPattern.overallRamadanImpact.totalMultiplier;
          totalMultiplier *= categoryPattern.overallRamadanImpact.totalMultiplier;
          confidence = Math.min(confidence, categoryPattern.overallRamadanImpact.confidence);
          specialConsiderations.push(`Category-specific Ramadan behavior applied`);
        }
      }

      // Apply cultural considerations
      contributingFactors.culturalEffect = this.getCulturalMultiplier(date, ramadanStatus);
      totalMultiplier *= contributingFactors.culturalEffect;

      const ramadanAdjustedForecast = baselineForecast * totalMultiplier;

      return {
        date: date.format('YYYY-MM-DD'),
        dayOfWeek: date.format('dddd'),
        ramadanStatus: ramadanStatus as any,
        baselineForecast,
        ramadanAdjustedForecast,
        multiplier: totalMultiplier,
        confidence,
        contributingFactors,
        specialConsiderations
      };

    } catch (error) {
      this.logger.warn(`Failed to generate daily forecast for ${date.format('YYYY-MM-DD')}: ${error.message}`);
      
      // Return safe fallback
      return {
        date: date.format('YYYY-MM-DD'),
        dayOfWeek: date.format('dddd'),
        ramadanStatus: 'normal',
        baselineForecast: 100, // Safe default
        ramadanAdjustedForecast: 100,
        multiplier: 1.0,
        confidence: 0.5,
        contributingFactors: {
          weeklyEffect: 1.0,
          timeOfDayEffect: 1.0,
          categoryEffect: 1.0,
          culturalEffect: 1.0
        },
        specialConsiderations: ['Fallback forecast due to analysis error']
      };
    }
  }

  /**
   * Generate comprehensive Ramadan-specific insights
   */
  private async generateRamadanSpecificInsights(
    ramadanAnalysis: any,
    request: RamadanForecastingRequest
  ): Promise<any> {
    try {
      const insights = {
        overallRamadanImpact: {
          expectedMultiplier: 1.0,
          confidence: 0.5,
          businessImpactLevel: 'medium' as any
        },
        weeklyProgression: {},
        timeOfDayInsights: {
          sahurImpact: null,
          iftarImpact: null,
          overallTimeShifts: false
        },
        categorySpecificInsights: []
      };

      // Calculate overall Ramadan impact
      if (ramadanAnalysis.corePatterns?.learnedPatterns?.length > 0) {
        const overallMultipliers = ramadanAnalysis.corePatterns.learnedPatterns.map(p => p.overallEffect.totalImpactMultiplier);
        insights.overallRamadanImpact.expectedMultiplier = mean(overallMultipliers);
        insights.overallRamadanImpact.confidence = mean(ramadanAnalysis.corePatterns.learnedPatterns.map(p => p.overallEffect.confidence));
        
        if (insights.overallRamadanImpact.expectedMultiplier >= 2.0) {
          insights.overallRamadanImpact.businessImpactLevel = 'very_high';
        } else if (insights.overallRamadanImpact.expectedMultiplier >= 1.5) {
          insights.overallRamadanImpact.businessImpactLevel = 'high';
        } else if (insights.overallRamadanImpact.expectedMultiplier >= 1.2) {
          insights.overallRamadanImpact.businessImpactLevel = 'medium';
        } else {
          insights.overallRamadanImpact.businessImpactLevel = 'low';
        }
      }

      // Generate weekly progression insights
      insights.weeklyProgression = this.generateWeeklyProgressionInsights(ramadanAnalysis.corePatterns);

      // Generate time-of-day insights
      if (ramadanAnalysis.timePatterns) {
        insights.timeOfDayInsights = this.generateTimeOfDayInsights(ramadanAnalysis.timePatterns);
      }

      // Generate category-specific insights
      if (ramadanAnalysis.categoryBehaviors) {
        insights.categorySpecificInsights = this.generateCategorySpecificInsights(ramadanAnalysis.categoryBehaviors);
      }

      return insights;

    } catch (error) {
      this.logger.warn(`Failed to generate Ramadan insights: ${error.message}`);
      return this.generateDefaultInsights();
    }
  }

  /**
   * Generate comprehensive business recommendations
   */
  private async generateBusinessRecommendations(
    ramadanAnalysis: any,
    comprehensiveForecast: any,
    request: RamadanForecastingRequest
  ): Promise<any> {
    try {
      const recommendations = {
        inventoryManagement: [],
        staffingRecommendations: [],
        promotionalOpportunities: [],
        operationalAdjustments: [],
        riskMitigation: []
      };

      // Generate inventory management recommendations
      recommendations.inventoryManagement = this.generateInventoryRecommendations(ramadanAnalysis, comprehensiveForecast);

      // Generate staffing recommendations
      recommendations.staffingRecommendations = this.generateStaffingRecommendations(ramadanAnalysis, comprehensiveForecast);

      // Generate promotional recommendations
      recommendations.promotionalOpportunities = this.generatePromotionalRecommendations(ramadanAnalysis);

      // Generate operational recommendations
      recommendations.operationalAdjustments = this.generateOperationalRecommendations(ramadanAnalysis);

      // Generate risk mitigation recommendations
      recommendations.riskMitigation = this.generateRiskMitigationRecommendations(ramadanAnalysis, comprehensiveForecast);

      return recommendations;

    } catch (error) {
      this.logger.warn(`Failed to generate business recommendations: ${error.message}`);
      return this.generateDefaultRecommendations();
    }
  }

  // Additional helper methods for implementation
  private async identifyRamadanPeriodsInForecast(request: RamadanForecastingRequest): Promise<any[]> {
    // Implementation to identify Ramadan periods within forecast range
    const ramadanPeriods = [];
    const startYear = moment(request.forecastStartDate).year();
    const endYear = moment(request.forecastEndDate).year();

    for (let year = startYear; year <= endYear; year++) {
      // Approximate Ramadan dates (in production, use accurate lunar calendar)
      const approximateRamadanStart = moment(`${year}-04-01`).tz(this.INDONESIAN_TIMEZONE);
      const approximateRamadanEnd = approximateRamadanStart.clone().add(30, 'days');

      if (approximateRamadanStart.isBetween(request.forecastStartDate, request.forecastEndDate, 'day', '[]') ||
          approximateRamadanEnd.isBetween(request.forecastStartDate, request.forecastEndDate, 'day', '[]')) {
        ramadanPeriods.push({
          year,
          startDate: approximateRamadanStart,
          endDate: approximateRamadanEnd,
          lebaranDate: approximateRamadanEnd.clone().add(1, 'day')
        });
      }
    }

    return ramadanPeriods;
  }

  private async generateBaselineForecasts(request: RamadanForecastingRequest): Promise<any> {
    // Generate baseline forecasts without Ramadan adjustments
    // This would integrate with the main forecasting service
    return {
      dailyBaseline: 100, // Placeholder implementation
      confidence: 0.8
    };
  }

  private generateForecastDates(startDate: Date, endDate: Date): moment.Moment[] {
    const dates = [];
    const current = moment(startDate).tz(this.INDONESIAN_TIMEZONE);
    const end = moment(endDate).tz(this.INDONESIAN_TIMEZONE);

    while (current.isSameOrBefore(end, 'day')) {
      dates.push(current.clone());
      current.add(1, 'day');
    }

    return dates;
  }

  private determineRamadanStatus(date: moment.Moment, ramadanAnalysis: any): string {
    // Determine if date falls within Ramadan and which week
    // Implementation would check against actual Ramadan periods
    return 'normal'; // Placeholder
  }

  private getBaselineForecastForDate(date: moment.Moment, baselineForecasts: any): number {
    // Get baseline forecast for specific date
    return 100; // Placeholder
  }

  private getWeeklyPattern(weekNumber: number, corePatterns: any): any {
    // Extract weekly pattern for specific Ramadan week
    return null; // Placeholder
  }

  private getCategoryPattern(category: string, categoryBehaviors: any): any {
    // Extract category-specific pattern
    return null; // Placeholder
  }

  private getCulturalMultiplier(date: moment.Moment, ramadanStatus: string): number {
    // Apply cultural considerations (day of week, special dates, etc.)
    return 1.0; // Placeholder
  }

  private aggregateToWeeklyForecasts(dailyForecasts: DailyRamadanForecast[]): WeeklyRamadanForecast[] {
    // Aggregate daily forecasts to weekly level
    return []; // Placeholder
  }

  private async generateHourlyRamadanForecasts(dailyForecasts: any, ramadanAnalysis: any, request: RamadanForecastingRequest): Promise<HourlyRamadanForecast[]> {
    // Generate hourly forecasts with time-of-day analysis
    return []; // Placeholder
  }

  private generateWeeklyProgressionInsights(corePatterns: any): any {
    // Generate insights for weekly progression
    return {}; // Placeholder
  }

  private generateTimeOfDayInsights(timePatterns: any): any {
    // Generate time-of-day insights
    return {
      sahurImpact: null,
      iftarImpact: null,
      overallTimeShifts: false
    };
  }

  private generateCategorySpecificInsights(categoryBehaviors: any): CategorySpecificInsight[] {
    // Generate category-specific insights
    return []; // Placeholder
  }

  private generateInventoryRecommendations(ramadanAnalysis: any, forecast: any): InventoryRecommendation[] {
    return [
      {
        category: 'Food Staples',
        recommendationType: 'increase_stock',
        multiplier: 1.8,
        timing: '2 weeks before Ramadan',
        rationale: 'High demand increase expected during Ramadan preparation period',
        confidence: 0.85
      }
    ];
  }

  private generateStaffingRecommendations(ramadanAnalysis: any, forecast: any): StaffingRecommendation[] {
    return [
      {
        period: 'Pre-Iftar (4-6 PM)',
        recommendation: 'increase_staff',
        focus: 'customer_service',
        details: 'Add 50% more staff during pre-iftar rush period',
        priority: 'high'
      }
    ];
  }

  private generatePromotionalRecommendations(ramadanAnalysis: any): PromotionalRecommendation[] {
    return [
      {
        timing: 'Week 1 of Ramadan',
        promotionType: 'family_package',
        targetCategories: ['Food Staples', 'Beverages'],
        expectedImpact: 1.4,
        culturalConsiderations: ['Emphasize family togetherness', 'Halal certification prominent'],
        implementation: 'Bundle sahur and iftar essentials'
      }
    ];
  }

  private generateOperationalRecommendations(ramadanAnalysis: any): OperationalRecommendation[] {
    return [
      {
        area: 'hours_adjustment',
        recommendation: 'Extend evening hours until 9 PM during Ramadan',
        implementation: 'Gradual transition starting 1 week before Ramadan',
        expectedBenefit: 'Capture post-iftar shopping surge',
        timeline: '1 month duration'
      }
    ];
  }

  private generateRiskMitigationRecommendations(ramadanAnalysis: any, forecast: any): RiskMitigationRecommendation[] {
    return [
      {
        riskType: 'stockout',
        riskLevel: 'high',
        mitigation: 'Maintain 3-week buffer stock for essential categories',
        monitoringPoints: ['Daily inventory levels', 'Supplier lead times'],
        contingencyPlan: 'Emergency supplier agreements for critical items'
      }
    ];
  }

  private formatRamadanPeriodForecast(period: any): RamadanPeriodForecast {
    return {
      ramadanYear: period.year,
      startDate: period.startDate.format('YYYY-MM-DD'),
      endDate: period.endDate.format('YYYY-MM-DD'),
      lebaranDate: period.lebaranDate.format('YYYY-MM-DD'),
      overallMultiplier: 1.5,
      confidence: 0.8,
      weeklyBreakdown: [
        {
          weekNumber: 1,
          phase: 'preparation',
          multiplier: 1.2,
          keyInsights: ['Gradual preparation shopping begins']
        }
      ]
    };
  }

  private async calculateForecastQualityMetrics(forecast: any, request: RamadanForecastingRequest, containsRamadan: boolean): Promise<any> {
    return {
      overallConfidence: 0.85,
      forecastReliability: 0.82,
      dataQuality: 0.88,
      culturalAccuracy: containsRamadan ? 0.90 : 0.95
    };
  }

  private async validateForecastAccuracy(forecast: any, request: RamadanForecastingRequest): Promise<any> {
    return {
      historicalAccuracy: 0.83,
      crossValidationScore: 0.81,
      confidenceIntervals: {
        lower: 0.75,
        upper: 0.92,
        level: 0.95
      }
    };
  }

  private generateNonRamadanInsights(): any {
    return {
      overallRamadanImpact: {
        expectedMultiplier: 1.0,
        confidence: 1.0,
        businessImpactLevel: 'minimal'
      },
      weeklyProgression: {},
      timeOfDayInsights: {
        sahurImpact: null,
        iftarImpact: null,
        overallTimeShifts: false
      },
      categorySpecificInsights: []
    };
  }

  private generateNonRamadanRecommendations(): any {
    return {
      inventoryManagement: [],
      staffingRecommendations: [],
      promotionalOpportunities: [],
      operationalAdjustments: [],
      riskMitigation: []
    };
  }

  private generateDefaultInsights(): any {
    return {
      overallRamadanImpact: {
        expectedMultiplier: 1.0,
        confidence: 0.5,
        businessImpactLevel: 'medium'
      },
      weeklyProgression: {},
      timeOfDayInsights: {
        sahurImpact: null,
        iftarImpact: null,
        overallTimeShifts: false
      },
      categorySpecificInsights: []
    };
  }

  private generateDefaultRecommendations(): any {
    return {
      inventoryManagement: [
        {
          category: 'General',
          recommendationType: 'maintain_stock',
          multiplier: 1.0,
          timing: 'Standard',
          rationale: 'Default recommendation due to insufficient analysis data',
          confidence: 0.5
        }
      ],
      staffingRecommendations: [],
      promotionalOpportunities: [],
      operationalAdjustments: [],
      riskMitigation: []
    };
  }

  /**
   * Quick access method for getting Ramadan multiplier (used by other services)
   */
  async getRamadanForecastMultiplier(
    tenantId: string,
    date: Date,
    businessType?: string,
    category?: string,
    region?: string
  ): Promise<{ multiplier: number; confidence: number; explanation: string }> {
    try {
      // Quick forecast for single date
      const quickRequest: RamadanForecastingRequest = {
        tenantId,
        businessType,
        region,
        category,
        forecastStartDate: date,
        forecastEndDate: date,
        granularity: 'daily'
      };

      const result = await this.generateRamadanForecast(quickRequest);
      
      if (result.comprehensiveForecast.dailyForecasts.length > 0) {
        const dailyForecast = result.comprehensiveForecast.dailyForecasts[0];
        return {
          multiplier: dailyForecast.multiplier,
          confidence: dailyForecast.confidence,
          explanation: `Integrated Ramadan analysis: ${dailyForecast.ramadanStatus} with ${dailyForecast.contributingFactors ? Object.keys(dailyForecast.contributingFactors).length : 0} contributing factors`
        };
      }

      return { multiplier: 1.0, confidence: 0.5, explanation: 'No specific Ramadan effect found' };

    } catch (error) {
      this.logger.warn(`Failed to get Ramadan forecast multiplier: ${error.message}`);
      return { multiplier: 1.0, confidence: 0.3, explanation: 'Error in Ramadan analysis' };
    }
  }
}