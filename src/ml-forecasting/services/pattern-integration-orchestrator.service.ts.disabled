import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject } from '@nestjs/common';
import { Cache } from 'cache-manager';
import { EventEmitter2 } from '@nestjs/event-emitter';
import * as moment from 'moment-timezone';
import { mean, median, standardDeviation, quantile } from 'simple-statistics';

import { InventoryTransaction } from '../../inventory/entities/inventory-transaction.entity';
import { Product } from '../../products/entities/product.entity';
import { ProductCategory } from '../../products/entities/product-category.entity';

// Pattern Learning Services
import { HolidayEffectLearningService } from './holiday-effect-learning.service';
import { RamadanPatternLearningService } from './ramadan-pattern-learning.service';
import { IndustrySeasonalityClassificationService } from './industry-seasonality-classification.service';
import { EducationalSeasonalityLearningService } from './educational-seasonality-learning.service';
import { AgriculturalWeatherSeasonalityService } from './agricultural-weather-seasonality.service';
import { TourismTravelSeasonalityService } from './tourism-travel-seasonality.service';
import { BusinessCycleSeasonalityService } from './business-cycle-seasonality.service';
import { IndonesianGeographicClassificationService } from './indonesian-geographic-classification.service';
import { ClimateWeatherRegionalAdaptationService } from './climate-weather-regional-adaptation.service';
import { EconomicZonePatternLearningService } from './economic-zone-pattern-learning.service';
import { CulturalSocialRegionalVariationsService } from './cultural-social-regional-variations.service';
import { InfrastructureLogisticsRegionalImpactService } from './infrastructure-logistics-regional-impact.service';

/**
 * PHASE 3.2.3.5.1: Pattern Integration Orchestrator ðŸŽ¯
 * 
 * Master orchestrator service that coordinates all pattern learning systems,
 * manages integration workflows, prioritizes patterns, and provides unified
 * access to all seasonal and regional intelligence capabilities.
 */

export interface PatternIntegrationRequest {
  tenantId: string;
  productId?: string;
  categoryId?: string;
  region?: string;
  businessType?: string;
  integrationScope: PatternScope[];
  prioritization: PatternPrioritization;
  timeHorizon: 'short_term' | 'medium_term' | 'long_term' | 'comprehensive';
  analysisDepth: 'basic' | 'standard' | 'comprehensive' | 'expert';
  includeValidation?: boolean;
  includeConflictResolution?: boolean;
  cacheStrategy?: 'aggressive' | 'balanced' | 'conservative' | 'disabled';
}

export type PatternScope = 
  | 'holiday_patterns'           // Holiday effect learning
  | 'ramadan_patterns'           // Ramadan-specific patterns  
  | 'industry_seasonality'       // Industry seasonality classification
  | 'educational_seasonality'    // Educational seasonal patterns
  | 'agricultural_seasonality'   // Agricultural & weather patterns
  | 'tourism_seasonality'        // Tourism & travel patterns
  | 'business_cycles'            // Business cycle seasonality
  | 'geographic_patterns'        // Geographic classification
  | 'climate_adaptation'         // Climate & weather adaptation
  | 'economic_zones'             // Economic zone patterns
  | 'cultural_variations'        // Cultural & social variations
  | 'infrastructure_logistics';  // Infrastructure & logistics impact

export interface PatternPrioritization {
  strategy: 'confidence_weighted' | 'business_impact' | 'recency_weighted' | 'balanced' | 'custom';
  customWeights?: PatternWeights;
  businessContext?: BusinessContext;
  seasonalImportance?: SeasonalImportance;
  regionalFocus?: RegionalFocus;
}

export interface PatternWeights {
  holidayPatterns: number;
  ramadanPatterns: number;
  industrySeasonality: number;
  educationalSeasonality: number;
  agriculturalSeasonality: number;
  tourismSeasonality: number;
  businessCycles: number;
  geographicPatterns: number;
  climateAdaptation: number;
  economicZones: number;
  culturalVariations: number;
  infrastructureLogistics: number;
}

export interface BusinessContext {
  sector: 'retail' | 'manufacturing' | 'agriculture' | 'services' | 'tourism' | 'education' | 'mixed';
  size: 'micro' | 'small' | 'medium' | 'large' | 'enterprise';
  customerBase: 'local' | 'regional' | 'national' | 'international';
  seasonalDependency: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  geographicScope: 'single_city' | 'single_province' | 'multi_province' | 'national' | 'international';
}

export interface SeasonalImportance {
  religiousEvents: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
  weatherPatterns: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
  educationalCycles: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
  businessCycles: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
  culturalEvents: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
}

export interface RegionalFocus {
  primaryRegion: string;
  secondaryRegions?: string[];
  crossRegionalAnalysis: boolean;
  infrastructureConsideration: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
  culturalSensitivity: 'critical' | 'high' | 'medium' | 'low' | 'minimal';
}

export interface PatternAnalysisResult {
  analysisId: string;
  request: PatternIntegrationRequest;
  patternResults: PatternComponentResult[];
  integratedInsights: IntegratedInsight[];
  prioritizedRecommendations: PrioritizedRecommendation[];
  validationSummary: ValidationSummary;
  conflictResolution: ConflictResolution;
  performanceMetrics: IntegrationPerformanceMetrics;
  confidence: number;
  metadata: {
    analysisDate: Date;
    processingTime: number;
    cacheHits: number;
    dataQuality: number;
    coverageScope: string[];
    limitations: string[];
  };
}

export interface PatternComponentResult {
  patternType: PatternScope;
  serviceUsed: string;
  analysisResult: any;
  confidence: number;
  weight: number;
  processingTime: number;
  cacheUsed: boolean;
  contributionScore: number;
}

export interface IntegratedInsight {
  insightId: string;
  insightType: 'seasonal_peak' | 'seasonal_trough' | 'trend_shift' | 'pattern_conflict' | 'opportunity' | 'risk';
  title: string;
  description: string;
  contributingPatterns: PatternScope[];
  confidence: number;
  businessImpact: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  timeFrame: string;
  actionability: 'immediate' | 'short_term' | 'medium_term' | 'long_term' | 'strategic';
  recommendations: string[];
  supportingData: any;
}

export interface PrioritizedRecommendation {
  recommendationId: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  category: 'inventory' | 'marketing' | 'operations' | 'strategy' | 'risk_management';
  title: string;
  description: string;
  expectedImpact: string;
  implementationComplexity: 'low' | 'medium' | 'high' | 'very_high';
  timeline: string;
  resources: string[];
  successMetrics: string[];
  basedOnPatterns: PatternScope[];
  confidence: number;
}

export interface ValidationSummary {
  overallValidation: 'excellent' | 'good' | 'fair' | 'poor' | 'failed';
  patternConsistency: number;
  dataQuality: number;
  confidenceAlignment: number;
  businessRelevance: number;
  validationIssues: ValidationIssue[];
  recommendations: string[];
}

export interface ValidationIssue {
  issueType: 'data_quality' | 'pattern_conflict' | 'low_confidence' | 'business_misalignment' | 'temporal_inconsistency';
  severity: 'critical' | 'high' | 'medium' | 'low';
  description: string;
  affectedPatterns: PatternScope[];
  suggestedActions: string[];
}

export interface ConflictResolution {
  conflictsDetected: number;
  resolutionStrategy: 'confidence_weighted' | 'business_priority' | 'recent_data' | 'hybrid' | 'manual_review';
  resolvedConflicts: ResolvedConflict[];
  unresolvableConflicts: UnresolvableConflict[];
  resolutionConfidence: number;
}

export interface ResolvedConflict {
  conflictId: string;
  conflictType: string;
  conflictingPatterns: PatternScope[];
  resolutionMethod: string;
  chosenPattern: PatternScope;
  rationale: string;
  confidence: number;
}

export interface UnresolvableConflict {
  conflictId: string;
  conflictType: string;
  conflictingPatterns: PatternScope[];
  reason: string;
  recommendedAction: string;
  requiresManualReview: boolean;
}

export interface IntegrationPerformanceMetrics {
  totalProcessingTime: number;
  patternProcessingTimes: Record<PatternScope, number>;
  cacheEfficiency: number;
  memoryUsage: number;
  dataQualityScore: number;
  integrationEfficiency: number;
  confidenceDistribution: {
    excellent: number; // > 0.9
    good: number;      // 0.8-0.9
    fair: number;      // 0.7-0.8
    poor: number;      // < 0.7
  };
}

@Injectable()
export class PatternIntegrationOrchestratorService {
  private readonly logger = new Logger(PatternIntegrationOrchestratorService.name);

  constructor(
    @InjectRepository(InventoryTransaction)
    private readonly inventoryTransactionRepository: Repository<InventoryTransaction>,
    
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
    
    @InjectRepository(ProductCategory)
    private readonly productCategoryRepository: Repository<ProductCategory>,
    
    @Inject(CACHE_MANAGER)
    private readonly cacheManager: Cache,
    
    private readonly eventEmitter: EventEmitter2,
    
    // Pattern Learning Services
    private readonly holidayEffectService: HolidayEffectLearningService,
    private readonly ramadanPatternService: RamadanPatternLearningService,
    private readonly industrySeasonalityService: IndustrySeasonalityClassificationService,
    private readonly educationalSeasonalityService: EducationalSeasonalityLearningService,
    private readonly agriculturalSeasonalityService: AgriculturalWeatherSeasonalityService,
    private readonly tourismSeasonalityService: TourismTravelSeasonalityService,
    private readonly businessCycleService: BusinessCycleSeasonalityService,
    private readonly geographicClassificationService: IndonesianGeographicClassificationService,
    private readonly climateAdaptationService: ClimateWeatherRegionalAdaptationService,
    private readonly economicZoneService: EconomicZonePatternLearningService,
    private readonly culturalVariationsService: CulturalSocialRegionalVariationsService,
    private readonly infrastructureLogisticsService: InfrastructureLogisticsRegionalImpactService,
  ) {}

  async integratePatterns(request: PatternIntegrationRequest): Promise<PatternAnalysisResult> {
    this.logger.log(`Starting pattern integration for tenant: ${request.tenantId}`);
    const startTime = Date.now();
    
    try {
      // Generate unique analysis ID
      const analysisId = `pattern_analysis_${request.tenantId}_${Date.now()}`;
      
      // Check cache first
      const cacheKey = this.generateCacheKey(request);
      if (request.cacheStrategy !== 'disabled') {
        const cachedResult = await this.cacheManager.get<PatternAnalysisResult>(cacheKey);
        if (cachedResult) {
          this.logger.log(`Using cached pattern analysis: ${analysisId}`);
          return cachedResult;
        }
      }

      // Execute pattern analysis across all requested scopes
      const patternResults = await this.executePatternAnalysis(request);
      
      // Generate integrated insights
      const integratedInsights = this.generateIntegratedInsights(patternResults, request);
      
      // Generate prioritized recommendations
      const prioritizedRecommendations = this.generatePrioritizedRecommendations(
        patternResults, 
        integratedInsights, 
        request
      );
      
      // Perform validation
      const validationSummary = this.performValidation(patternResults, request);
      
      // Resolve conflicts
      const conflictResolution = this.performConflictResolution(patternResults, request);
      
      // Calculate performance metrics
      const performanceMetrics = this.calculatePerformanceMetrics(patternResults, startTime);
      
      const result: PatternAnalysisResult = {
        analysisId,
        request,
        patternResults,
        integratedInsights,
        prioritizedRecommendations,
        validationSummary,
        conflictResolution,
        performanceMetrics,
        confidence: this.calculateOverallConfidence(patternResults, validationSummary),
        metadata: {
          analysisDate: new Date(),
          processingTime: Date.now() - startTime,
          cacheHits: patternResults.filter(r => r.cacheUsed).length,
          dataQuality: mean(patternResults.map(r => r.confidence)),
          coverageScope: request.integrationScope,
          limitations: this.getAnalysisLimitations(request)
        }
      };

      // Cache the result
      if (request.cacheStrategy !== 'disabled') {
        const cacheTTL = this.calculateCacheTTL(request.cacheStrategy);
        await this.cacheManager.set(cacheKey, result, cacheTTL);
      }

      // Emit integration completion event
      this.eventEmitter.emit('pattern.integration.completed', {
        analysisId,
        tenantId: request.tenantId,
        patternsAnalyzed: patternResults.length,
        insightsGenerated: integratedInsights.length,
        recommendationsCreated: prioritizedRecommendations.length,
        confidence: result.confidence,
        processingTime: result.metadata.processingTime
      });

      this.logger.log(`Pattern integration completed: ${analysisId} in ${result.metadata.processingTime}ms`);
      return result;
      
    } catch (error) {
      this.logger.error(`Error in pattern integration: ${error.message}`, error.stack);
      throw new Error(`Pattern integration failed: ${error.message}`);
    }
  }

  private async executePatternAnalysis(request: PatternIntegrationRequest): Promise<PatternComponentResult[]> {
    const results: PatternComponentResult[] = [];
    const weights = this.calculatePatternWeights(request.prioritization);

    // Execute each pattern analysis in parallel for performance
    const analysisPromises = request.integrationScope.map(async (scope) => {
      const startTime = Date.now();
      let analysisResult: any;
      let cacheUsed = false;

      try {
        // Check cache for individual pattern
        const patternCacheKey = `pattern_${scope}_${request.tenantId}`;
        const cachedPattern = await this.cacheManager.get(patternCacheKey);
        
        if (cachedPattern && request.cacheStrategy !== 'disabled') {
          analysisResult = cachedPattern;
          cacheUsed = true;
        } else {
          // Execute pattern-specific analysis
          analysisResult = await this.executeSpecificPatternAnalysis(scope, request);
          
          // Cache individual pattern result
          if (request.cacheStrategy !== 'disabled') {
            await this.cacheManager.set(patternCacheKey, analysisResult, 900); // 15 minutes
          }
        }

        const processingTime = Date.now() - startTime;
        const confidence = this.extractConfidence(analysisResult);
        const weight = weights[scope] || 1.0;

        return {
          patternType: scope,
          serviceUsed: this.getServiceName(scope),
          analysisResult,
          confidence,
          weight,
          processingTime,
          cacheUsed,
          contributionScore: confidence * weight
        } as PatternComponentResult;

      } catch (error) {
        this.logger.warn(`Pattern analysis failed for ${scope}: ${error.message}`);
        return null;
      }
    });

    const analysisResults = await Promise.all(analysisPromises);
    return analysisResults.filter(result => result !== null);
  }

  private async executeSpecificPatternAnalysis(scope: PatternScope, request: PatternIntegrationRequest): Promise<any> {
    const baseRequest = {
      tenantId: request.tenantId,
      analysisDepth: request.analysisDepth
    };

    switch (scope) {
      case 'holiday_patterns':
        return await this.holidayEffectService.analyzeHolidayEffects({
          ...baseRequest,
          holidayTypes: ['indonesian_national', 'religious', 'regional'],
          includeCustomHolidays: true
        });

      case 'ramadan_patterns':
        return await this.ramadanPatternService.analyzeRamadanPatterns({
          ...baseRequest,
          includePreRamadan: true,
          includePostRamadan: true,
          includeMudikEffect: true
        });

      case 'industry_seasonality':
        return await this.industrySeasonalityService.classifyIndustrySeasonality({
          ...baseRequest,
          businessType: request.businessType,
          includeSupplyChainFactors: true
        });

      case 'educational_seasonality':
        return await this.educationalSeasonalityService.analyzeEducationalSeasonality({
          ...baseRequest,
          educationLevel: ['primary', 'secondary', 'higher'],
          includeVacationImpacts: true
        });

      case 'agricultural_seasonality':
        return await this.agriculturalSeasonalityService.analyzeAgriculturalWeatherSeasonality({
          ...baseRequest,
          cropTypes: ['rice', 'palm_oil', 'coffee'],
          includeWeatherForecasting: true
        });

      case 'tourism_seasonality':
        return await this.tourismSeasonalityService.analyzeTourismTravelSeasonality({
          ...baseRequest,
          region: request.region,
          includeInternationalTourism: true
        });

      case 'business_cycles':
        return await this.businessCycleService.analyzeBusinessCycleSeasonality({
          ...baseRequest,
          businessModel: ['b2b_wholesale', 'b2c_retail'],
          includePayrollCycles: true
        });

      case 'geographic_patterns':
        return await this.geographicClassificationService.analyzeGeographicClassification({
          ...baseRequest,
          analysisLocation: { province: request.region as any, timezone: 'WIB' },
          includeProvinceAnalysis: true
        });

      case 'climate_adaptation':
        return await this.climateAdaptationService.analyzeClimateWeatherAdaptation({
          ...baseRequest,
          region: request.region as any,
          includeMonsoonAnalysis: true
        });

      case 'economic_zones':
        return await this.economicZoneService.analyzeEconomicZonePatterns({
          ...baseRequest,
          targetZone: request.region as any,
          includeIndustrialClusters: true
        });

      case 'cultural_variations':
        return await this.culturalVariationsService.analyzeCulturalSocialVariations({
          ...baseRequest,
          region: request.region as any,
          includeReligiousPatterns: true
        });

      case 'infrastructure_logistics':
        return await this.infrastructureLogisticsService.analyzeInfrastructureLogisticsImpact({
          ...baseRequest,
          region: request.region as any,
          includeTransportationAnalysis: true
        });

      default:
        throw new Error(`Unsupported pattern scope: ${scope}`);
    }
  }

  private calculatePatternWeights(prioritization: PatternPrioritization): Record<string, number> {
    if (prioritization.strategy === 'custom' && prioritization.customWeights) {
      return prioritization.customWeights as any;
    }

    // Default balanced weights
    const defaultWeights = {
      holiday_patterns: 1.0,
      ramadan_patterns: 1.2, // Higher for Indonesian context
      industry_seasonality: 1.1,
      educational_seasonality: 0.8,
      agricultural_seasonality: 0.9,
      tourism_seasonality: 0.8,
      business_cycles: 1.0,
      geographic_patterns: 0.9,
      climate_adaptation: 0.8,
      economic_zones: 1.0,
      cultural_variations: 0.9,
      infrastructure_logistics: 0.8
    };

    return defaultWeights;
  }

  private generateIntegratedInsights(
    patternResults: PatternComponentResult[], 
    request: PatternIntegrationRequest
  ): IntegratedInsight[] {
    const insights: IntegratedInsight[] = [];
    
    // Cross-pattern insight generation logic would be implemented here
    // This is a simplified version for brevity
    
    const highConfidencePatterns = patternResults.filter(p => p.confidence > 0.8);
    
    if (highConfidencePatterns.length > 0) {
      insights.push({
        insightId: 'integrated_insight_1',
        insightType: 'seasonal_peak',
        title: 'Multi-Pattern Seasonal Peak Identified',
        description: 'Multiple pattern systems indicate a significant seasonal peak',
        contributingPatterns: highConfidencePatterns.map(p => p.patternType),
        confidence: mean(highConfidencePatterns.map(p => p.confidence)),
        businessImpact: 'high',
        timeFrame: 'next_30_days',
        actionability: 'immediate',
        recommendations: ['Increase inventory levels', 'Prepare marketing campaigns'],
        supportingData: { patterns: highConfidencePatterns.length }
      });
    }

    return insights;
  }

  private generatePrioritizedRecommendations(
    patternResults: PatternComponentResult[],
    insights: IntegratedInsight[],
    request: PatternIntegrationRequest
  ): PrioritizedRecommendation[] {
    // Simplified recommendation generation
    return insights.map((insight, index) => ({
      recommendationId: `rec_${index + 1}`,
      priority: insight.businessImpact === 'very_high' ? 'critical' : 'high',
      category: 'inventory',
      title: `Action based on ${insight.title}`,
      description: insight.description,
      expectedImpact: `${insight.businessImpact} business impact expected`,
      implementationComplexity: 'medium',
      timeline: insight.timeFrame,
      resources: ['inventory_team', 'marketing_team'],
      successMetrics: ['sales_increase', 'inventory_turnover'],
      basedOnPatterns: insight.contributingPatterns,
      confidence: insight.confidence
    }));
  }

  private performValidation(
    patternResults: PatternComponentResult[], 
    request: PatternIntegrationRequest
  ): ValidationSummary {
    const avgConfidence = mean(patternResults.map(r => r.confidence));
    const consistencyScore = this.calculateConsistencyScore(patternResults);
    
    return {
      overallValidation: avgConfidence > 0.8 ? 'excellent' : 'good',
      patternConsistency: consistencyScore,
      dataQuality: avgConfidence,
      confidenceAlignment: 0.85,
      businessRelevance: 0.90,
      validationIssues: [],
      recommendations: ['Continue with current analysis approach']
    };
  }

  private performConflictResolution(
    patternResults: PatternComponentResult[], 
    request: PatternIntegrationRequest
  ): ConflictResolution {
    // Simplified conflict resolution
    return {
      conflictsDetected: 0,
      resolutionStrategy: 'confidence_weighted',
      resolvedConflicts: [],
      unresolvableConflicts: [],
      resolutionConfidence: 0.95
    };
  }

  private calculatePerformanceMetrics(
    patternResults: PatternComponentResult[], 
    startTime: number
  ): IntegrationPerformanceMetrics {
    const totalTime = Date.now() - startTime;
    const cacheHits = patternResults.filter(r => r.cacheUsed).length;
    const confidences = patternResults.map(r => r.confidence);
    
    return {
      totalProcessingTime: totalTime,
      patternProcessingTimes: patternResults.reduce((acc, r) => {
        acc[r.patternType] = r.processingTime;
        return acc;
      }, {} as any),
      cacheEfficiency: patternResults.length > 0 ? cacheHits / patternResults.length : 0,
      memoryUsage: 0, // Would be implemented with actual memory monitoring
      dataQualityScore: mean(confidences),
      integrationEfficiency: 0.85,
      confidenceDistribution: {
        excellent: confidences.filter(c => c > 0.9).length,
        good: confidences.filter(c => c >= 0.8 && c <= 0.9).length,
        fair: confidences.filter(c => c >= 0.7 && c < 0.8).length,
        poor: confidences.filter(c => c < 0.7).length
      }
    };
  }

  private calculateOverallConfidence(
    patternResults: PatternComponentResult[], 
    validation: ValidationSummary
  ): number {
    const weightedConfidence = patternResults.reduce((sum, r) => sum + (r.confidence * r.weight), 0) / 
                              patternResults.reduce((sum, r) => sum + r.weight, 0);
    
    return Math.min(0.95, weightedConfidence * validation.dataQuality);
  }

  private extractConfidence(analysisResult: any): number {
    return analysisResult?.confidence || 0.75; // Default confidence
  }

  private getServiceName(scope: PatternScope): string {
    const serviceMap: Record<PatternScope, string> = {
      'holiday_patterns': 'HolidayEffectLearningService',
      'ramadan_patterns': 'RamadanPatternLearningService',
      'industry_seasonality': 'IndustrySeasonalityClassificationService',
      'educational_seasonality': 'EducationalSeasonalityLearningService',
      'agricultural_seasonality': 'AgriculturalWeatherSeasonalityService',
      'tourism_seasonality': 'TourismTravelSeasonalityService',
      'business_cycles': 'BusinessCycleSeasonalityService',
      'geographic_patterns': 'IndonesianGeographicClassificationService',
      'climate_adaptation': 'ClimateWeatherRegionalAdaptationService',
      'economic_zones': 'EconomicZonePatternLearningService',
      'cultural_variations': 'CulturalSocialRegionalVariationsService',
      'infrastructure_logistics': 'InfrastructureLogisticsRegionalImpactService'
    };

    return serviceMap[scope] || 'UnknownService';
  }

  private calculateConsistencyScore(patternResults: PatternComponentResult[]): number {
    // Simplified consistency calculation
    const confidences = patternResults.map(r => r.confidence);
    return 1 - (standardDeviation(confidences) / mean(confidences));
  }

  private generateCacheKey(request: PatternIntegrationRequest): string {
    const keyComponents = [
      request.tenantId,
      request.productId || 'all',
      request.categoryId || 'all',
      request.region || 'all',
      request.integrationScope.sort().join(','),
      request.prioritization.strategy,
      request.timeHorizon,
      request.analysisDepth
    ];
    
    return `pattern_integration_${keyComponents.join('_')}`;
  }

  private calculateCacheTTL(strategy: string): number {
    const ttlMap = {
      'aggressive': 3600,   // 1 hour
      'balanced': 1800,     // 30 minutes
      'conservative': 900,  // 15 minutes
      'disabled': 0
    };
    
    return ttlMap[strategy] || 1800;
  }

  private getAnalysisLimitations(request: PatternIntegrationRequest): string[] {
    return [
      'Pattern integration based on available historical data',
      'Confidence levels may vary across different pattern types',
      'Real-time data updates may affect pattern accuracy',
      'Business context assumptions may not apply to all scenarios'
    ];
  }
}