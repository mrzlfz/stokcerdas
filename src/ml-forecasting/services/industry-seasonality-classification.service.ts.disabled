import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Inject } from '@nestjs/common';
import { Cache } from 'cache-manager';
import { EventEmitter2 } from '@nestjs/event-emitter';
import * as moment from 'moment-timezone';
import { mean, median, standardDeviation, quantile } from 'simple-statistics';

import { InventoryTransaction } from '../../inventory/entities/inventory-transaction.entity';
import { Product } from '../../products/entities/product.entity';
import { ProductCategory } from '../../products/entities/product-category.entity';

/**
 * PHASE 3.2.3.3.1: Industry Seasonality Classification Framework üè≠
 * 
 * Comprehensive framework for classifying and learning industry-specific seasonal patterns
 * in the Indonesian market. This service provides the foundation for understanding how
 * different industries experience unique seasonal variations beyond religious holidays.
 */

export interface IndustrySeasonalityProfile {
  industryType: IndonesianIndustryType;
  seasonalityCharacteristics: SeasonalityCharacteristics;
  indonesianContext: IndonesianBusinessContext;
  seasonalPatterns: SeasonalPattern[];
  drivingFactors: SeasonalityDriver[];
  businessImplications: BusinessImplication[];
  learningMetadata: SeasonalityLearningMetadata;
}

export type IndonesianIndustryType = 
  | 'retail_general'           // General retail
  | 'retail_fashion'           // Fashion & clothing
  | 'retail_electronics'       // Electronics & technology
  | 'food_beverage'           // Food & beverage
  | 'food_restaurant'         // Restaurant & food service
  | 'education_supplies'      // Educational supplies
  | 'education_services'      // Educational services
  | 'agriculture_primary'     // Primary agriculture
  | 'agriculture_processed'   // Processed agricultural products
  | 'tourism_accommodation'   // Hotels & accommodation
  | 'tourism_travel'          // Travel & transportation
  | 'tourism_recreation'      // Recreation & entertainment
  | 'healthcare_products'     // Healthcare products
  | 'healthcare_services'     // Healthcare services
  | 'automotive_retail'       // Automotive retail
  | 'automotive_services'     // Automotive services
  | 'construction_materials'  // Construction materials
  | 'construction_services'   // Construction services
  | 'financial_services'      // Financial services
  | 'beauty_personal_care'    // Beauty & personal care
  | 'home_garden'             // Home & garden
  | 'sports_recreation'       // Sports & recreation
  | 'religious_items'         // Religious items & services
  | 'traditional_crafts'      // Traditional Indonesian crafts
  | 'modern_services'         // Modern services (tech, consulting)
  | 'government_related'      // Government-related businesses
  | 'export_import'           // Export/import businesses
  | 'logistics_transport'     // Logistics & transportation
  | 'energy_utilities'        // Energy & utilities
  | 'telecommunications'      // Telecommunications
  | 'media_entertainment';    // Media & entertainment

export interface SeasonalityCharacteristics {
  seasonalityStrength: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  seasonalityComplexity: 'simple' | 'moderate' | 'complex' | 'very_complex';
  predictabilityLevel: 'highly_predictable' | 'predictable' | 'moderately_predictable' | 'unpredictable';
  volatility: 'very_low' | 'low' | 'medium' | 'high' | 'very_high';
  
  primarySeasonalDrivers: SeasonalityDriverType[];
  secondarySeasonalDrivers: SeasonalityDriverType[];
  
  seasonalCycleLength: {
    primary: 'weekly' | 'monthly' | 'quarterly' | 'semi_annual' | 'annual' | 'multi_year';
    secondary?: 'weekly' | 'monthly' | 'quarterly' | 'semi_annual' | 'annual' | 'multi_year';
  };
  
  peakSeasons: SeasonalPeriod[];
  lowSeasons: SeasonalPeriod[];
  transitionPeriods: SeasonalPeriod[];
}

export type SeasonalityDriverType = 
  | 'weather_climate'         // Weather and climate patterns
  | 'educational_calendar'    // School and academic calendar
  | 'agricultural_cycles'     // Agricultural and harvest cycles
  | 'religious_holidays'      // Religious holidays and observances
  | 'cultural_festivals'      // Cultural festivals and events
  | 'government_policies'     // Government policies and regulations
  | 'tourism_patterns'        // Tourism and travel patterns
  | 'business_cycles'         // Business and economic cycles
  | 'payroll_cycles'          // Salary and payroll cycles
  | 'tax_periods'             // Tax filing and payment periods
  | 'international_events'    // International events and trends
  | 'technology_cycles'       // Technology adoption and upgrade cycles
  | 'fashion_trends'          // Fashion and style trends
  | 'health_wellness'         // Health and wellness trends
  | 'social_media_trends'     // Social media and viral trends
  | 'supply_chain'            // Supply chain and logistics patterns
  | 'currency_fluctuations'   // Currency and exchange rate impacts
  | 'regulatory_changes'      // Regulatory and compliance changes
  | 'demographic_shifts'      // Demographic and population changes
  | 'urbanization_trends';    // Urbanization and migration patterns

export interface SeasonalPattern {
  patternId: string;
  patternName: string;
  patternType: 'cyclical' | 'trending' | 'irregular' | 'mixed';
  
  timeframe: {
    startPeriod: string; // e.g., "January", "Q1", "Week 1"
    endPeriod: string;
    duration: number; // in days
    recurrence: 'annual' | 'semi_annual' | 'quarterly' | 'monthly' | 'weekly';
  };
  
  impactMetrics: {
    averageMultiplier: number;
    confidenceInterval: { lower: number; upper: number };
    historicalVariability: number;
    trendDirection: 'increasing' | 'stable' | 'decreasing';
  };
  
  drivingFactors: SeasonalityDriver[];
  affectedCategories: CategoryImpact[];
  
  businessCharacteristics: {
    customerBehaviorChange: string;
    inventoryRequirements: string;
    staffingImpact: string;
    marketingOpportunities: string;
    operationalAdjustments: string;
  };
}

export interface SeasonalityDriver {
  driverType: SeasonalityDriverType;
  driverName: string;
  impactStrength: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  predictability: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  
  schedule: {
    timing: string; // e.g., "March-April", "Every 3rd Friday"
    duration: number; // in days
    leadTime: number; // days before impact begins
    lagTime: number; // days after impact ends
  };
  
  geographicalScope: 'national' | 'regional' | 'local' | 'international';
  affectedDemographics: string[];
  
  historicalImpact: {
    averageEffect: number;
    volatility: number;
    growthTrend: 'increasing' | 'stable' | 'decreasing';
  };
}

export interface SeasonalPeriod {
  name: string;
  startDate: string; // MM-DD format or descriptive
  endDate: string;
  characteristics: {
    demandLevel: 'very_high' | 'high' | 'medium' | 'low' | 'very_low';
    volatility: 'very_high' | 'high' | 'medium' | 'low' | 'very_low';
    predictability: 'very_high' | 'high' | 'medium' | 'low' | 'very_low';
  };
  keyEvents: string[];
  businessFocus: string[];
}

export interface CategoryImpact {
  categoryName: string;
  impactMultiplier: number;
  confidence: number;
  impactType: 'volume' | 'pricing' | 'mix' | 'timing' | 'mixed';
  specificCharacteristics: string[];
}

export interface IndonesianBusinessContext {
  geographicalConsiderations: {
    javaImpact: string;         // Java island specific patterns
    sumateraImpact: string;     // Sumatera island specific patterns
    kalimantanImpact: string;   // Kalimantan island specific patterns
    sulawesiImpact: string;     // Sulawesi island specific patterns
    easternIndonesiaImpact: string; // Eastern Indonesia patterns
  };
  
  culturalFactors: {
    traditionalPractices: string[];
    modernInfluences: string[];
    generationalDifferences: string[];
    urbanRuralDivide: string[];
  };
  
  economicFactors: {
    incomePatterns: string;
    inflationImpact: string;
    currencyConsiderations: string;
    governmentPolicies: string[];
  };
  
  infrastructureFactors: {
    logisticsConsiderations: string[];
    digitalAdoption: string;
    paymentMethodPreferences: string[];
    deliveryCapabilities: string[];
  };
  
  competitiveFactors: {
    marketMaturity: 'emerging' | 'developing' | 'mature' | 'declining';
    competitionLevel: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
    barriersToEntry: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
    innovationRate: 'very_fast' | 'fast' | 'moderate' | 'slow' | 'very_slow';
  };
}

export interface BusinessImplication {
  area: 'inventory_management' | 'staffing' | 'marketing' | 'operations' | 'finance' | 'strategy';
  implication: string;
  actionRequired: string;
  timeline: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  estimatedImpact: {
    revenue: 'very_positive' | 'positive' | 'neutral' | 'negative' | 'very_negative';
    cost: 'increase' | 'neutral' | 'decrease';
    risk: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  };
}

export interface SeasonalityLearningMetadata {
  dataQuality: {
    historicalDepth: number; // years of data
    dataCompleteness: number; // 0-1 score
    dataConsistency: number; // 0-1 score
  };
  
  learningAccuracy: {
    overallAccuracy: number;
    patternRecognitionAccuracy: number;
    predictionReliability: number;
    crossValidationScore: number;
  };
  
  confidence: {
    overallConfidence: number;
    patternConfidence: Record<string, number>;
    driverConfidence: Record<string, number>;
  };
  
  lastUpdated: string;
  nextUpdateScheduled: string;
  updateFrequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';
}

export interface IndustrySeasonalityLearningRequest {
  tenantId: string;
  industryType?: IndonesianIndustryType;
  businessType?: string;
  region?: string;
  categories?: string[];
  analysisStartDate?: Date;
  analysisEndDate?: Date;
  learningDepth: 'basic' | 'standard' | 'comprehensive' | 'expert';
  includeCrossIndustryComparison?: boolean;
  includeRegionalVariations?: boolean;
  includeCompetitiveIntelligence?: boolean;
  minDataQualityThreshold?: number;
}

export interface IndustrySeasonalityLearningResult {
  learningId: string;
  tenantId: string;
  industryProfile: IndustrySeasonalityProfile;
  learnedPatterns: SeasonalPattern[];
  crossIndustryInsights?: CrossIndustryInsight[];
  regionalVariations?: RegionalVariation[];
  competitiveIntelligence?: CompetitiveSeasonalityInsight[];
  recommendations: BusinessRecommendation[];
  qualityMetrics: SeasonalityLearningMetadata;
  validationResults: ValidationResult[];
}

export interface CrossIndustryInsight {
  comparisonIndustry: IndonesianIndustryType;
  similarityScore: number;
  sharedPatterns: string[];
  uniquePatterns: string[];
  learningOpportunities: string[];
}

export interface RegionalVariation {
  region: string;
  variationStrength: 'very_high' | 'high' | 'medium' | 'low' | 'minimal';
  uniquePatterns: SeasonalPattern[];
  adaptationRecommendations: string[];
}

export interface CompetitiveSeasonalityInsight {
  competitorBehavior: string;
  marketOpportunities: string[];
  threatAnalysis: string[];
  strategicRecommendations: string[];
}

export interface BusinessRecommendation {
  recommendationType: 'strategic' | 'tactical' | 'operational' | 'preventive';
  recommendation: string;
  implementation: string;
  expectedImpact: string;
  timeline: string;
  resources: string[];
  riskFactors: string[];
  successMetrics: string[];
}

export interface ValidationResult {
  validationType: 'backtesting' | 'cross_validation' | 'expert_review' | 'market_validation';
  accuracy: number;
  reliability: number;
  notes: string[];
}

@Injectable()
export class IndustrySeasonalityClassificationService {
  private readonly logger = new Logger(IndustrySeasonalityClassificationService.name);
  private readonly CACHE_TTL = 86400 * 7; // 7 days
  private readonly INDONESIAN_TIMEZONE = 'Asia/Jakarta';

  // Comprehensive Indonesian industry seasonality profiles
  private readonly industryProfiles: Record<IndonesianIndustryType, IndustrySeasonalityProfile> = {
    retail_general: {
      industryType: 'retail_general',
      seasonalityCharacteristics: {
        seasonalityStrength: 'high',
        seasonalityComplexity: 'moderate',
        predictabilityLevel: 'predictable',
        volatility: 'medium',
        primarySeasonalDrivers: ['religious_holidays', 'payroll_cycles', 'cultural_festivals'],
        secondarySeasonalDrivers: ['government_policies', 'weather_climate'],
        seasonalCycleLength: { primary: 'annual', secondary: 'monthly' },
        peakSeasons: [
          {
            name: 'Lebaran/Eid Shopping',
            startDate: '03-15',
            endDate: '05-15',
            characteristics: { demandLevel: 'very_high', volatility: 'high', predictability: 'high' },
            keyEvents: ['Ramadan preparation', 'Eid shopping', 'Mudik travel'],
            businessFocus: ['Inventory buildup', 'Extended hours', 'Promotional campaigns']
          },
          {
            name: 'Back to School',
            startDate: '06-15',
            endDate: '08-15',
            characteristics: { demandLevel: 'high', volatility: 'medium', predictability: 'very_high' },
            keyEvents: ['New school year', 'Uniform shopping', 'Supply purchases'],
            businessFocus: ['Educational products', 'Children items', 'Stationery']
          },
          {
            name: 'Year-end Holidays',
            startDate: '11-15',
            endDate: '01-10',
            characteristics: { demandLevel: 'high', volatility: 'medium', predictability: 'high' },
            keyEvents: ['Christmas', 'New Year', 'School holidays'],
            businessFocus: ['Gift items', 'Holiday products', 'Celebration supplies']
          }
        ],
        lowSeasons: [
          {
            name: 'Post-Lebaran Recovery',
            startDate: '05-16',
            endDate: '06-14',
            characteristics: { demandLevel: 'low', volatility: 'low', predictability: 'high' },
            keyEvents: ['Financial recovery', 'Return to routine'],
            businessFocus: ['Inventory clearance', 'Cost optimization', 'Planning']
          }
        ],
        transitionPeriods: [
          {
            name: 'Pre-Ramadan Preparation',
            startDate: '02-15',
            endDate: '03-14',
            characteristics: { demandLevel: 'medium', volatility: 'medium', predictability: 'medium' },
            keyEvents: ['Ramadan preparation', 'Lunar calendar announcement'],
            businessFocus: ['Stock preparation', 'Supplier coordination', 'Staff planning']
          }
        ]
      },
      indonesianContext: {
        geographicalConsiderations: {
          javaImpact: 'Highest retail concentration, most predictable patterns',
          sumateraImpact: 'Agricultural influence, resource-based economy',
          kalimantanImpact: 'Mining and plantation influence, industrial focus',
          sulawesiImpact: 'Mixed economy, strong traditional elements',
          easternIndonesiaImpact: 'Tourism and fishing influence, more volatile'
        },
        culturalFactors: {
          traditionalPractices: ['Gotong royong community support', 'Traditional market loyalty', 'Respect for elders in purchasing decisions'],
          modernInfluences: ['E-commerce adoption', 'Social media influence', 'Urban lifestyle changes'],
          generationalDifferences: ['Millennial tech adoption', 'Gen Z digital natives', 'Traditional generation cash preference'],
          urbanRuralDivide: ['Urban credit adoption', 'Rural cash transactions', 'Infrastructure disparities']
        },
        economicFactors: {
          incomePatterns: 'Monthly salary cycles with government payroll influence',
          inflationImpact: 'Food and energy price sensitivity affects discretionary spending',
          currencyConsiderations: 'Rupiah volatility impacts imported goods pricing',
          governmentPolicies: ['VAT changes', 'Import duty adjustments', 'Minimum wage policies', 'Fuel subsidy changes']
        },
        infrastructureFactors: {
          logisticsConsiderations: ['Island logistics challenges', 'Rainy season transport issues', 'Last-mile delivery limitations'],
          digitalAdoption: 'Rapid mobile payment adoption, gradual e-commerce growth',
          paymentMethodPreferences: ['Cash dominant', 'Mobile payments growing', 'Credit cards urban-focused'],
          deliveryCapabilities: ['Urban same-day delivery', 'Rural 2-3 day delivery', 'COD preference strong']
        },
        competitiveFactors: {
          marketMaturity: 'developing',
          competitionLevel: 'high',
          barriersToEntry: 'medium',
          innovationRate: 'fast'
        }
      },
      seasonalPatterns: [], // Will be populated during learning
      drivingFactors: [], // Will be populated during learning
      businessImplications: [], // Will be populated during learning
      learningMetadata: {
        dataQuality: { historicalDepth: 0, dataCompleteness: 0, dataConsistency: 0 },
        learningAccuracy: { overallAccuracy: 0, patternRecognitionAccuracy: 0, predictionReliability: 0, crossValidationScore: 0 },
        confidence: { overallConfidence: 0, patternConfidence: {}, driverConfidence: {} },
        lastUpdated: '',
        nextUpdateScheduled: '',
        updateFrequency: 'monthly'
      }
    },

    food_beverage: {
      industryType: 'food_beverage',
      seasonalityCharacteristics: {
        seasonalityStrength: 'very_high',
        seasonalityComplexity: 'complex',
        predictabilityLevel: 'moderately_predictable',
        volatility: 'high',
        primarySeasonalDrivers: ['religious_holidays', 'weather_climate', 'agricultural_cycles'],
        secondarySeasonalDrivers: ['cultural_festivals', 'health_wellness', 'social_media_trends'],
        seasonalCycleLength: { primary: 'annual', secondary: 'monthly' },
        peakSeasons: [
          {
            name: 'Ramadan Food Peak',
            startDate: '03-01',
            endDate: '05-15',
            characteristics: { demandLevel: 'very_high', volatility: 'very_high', predictability: 'high' },
            keyEvents: ['Iftar preparations', 'Sahur food', 'Takjil snacks', 'Lebaran cooking'],
            businessFocus: ['Halal certification', 'Traditional foods', 'Bulk packaging', 'Fresh ingredients']
          },
          {
            name: 'Harvest Season Abundance',
            startDate: '08-01',
            endDate: '10-31',
            characteristics: { demandLevel: 'high', volatility: 'medium', predictability: 'high' },
            keyEvents: ['Rice harvest', 'Fruit season', 'Vegetable abundance'],
            businessFocus: ['Local sourcing', 'Seasonal products', 'Processing capacity']
          }
        ],
        lowSeasons: [
          {
            name: 'Rainy Season Challenges',
            startDate: '12-01',
            endDate: '02-28',
            characteristics: { demandLevel: 'medium', volatility: 'high', predictability: 'low' },
            keyEvents: ['Flooding risks', 'Transport disruptions', 'Storage challenges'],
            businessFocus: ['Supply chain resilience', 'Inventory management', 'Price stability']
          }
        ],
        transitionPeriods: []
      },
      indonesianContext: {
        geographicalConsiderations: {
          javaImpact: 'Major rice production, diverse food manufacturing',
          sumateraImpact: 'Palm oil, spices, coffee production center',
          kalimantanImpact: 'Agricultural products, seasonal fruit exports',
          sulawesiImpact: 'Coffee, cocoa, seafood specialties',
          easternIndonesiaImpact: 'Seafood, tropical fruits, spice islands'
        },
        culturalFactors: {
          traditionalPractices: ['Family cooking traditions', 'Regional cuisine preferences', 'Traditional market shopping'],
          modernInfluences: ['Health consciousness', 'Convenience foods', 'International cuisine'],
          generationalDifferences: ['Traditional cooking vs convenience', 'Health awareness levels', 'Brand loyalty patterns'],
          urbanRuralDivide: ['Fresh vs processed preferences', 'Local vs branded products', 'Price sensitivity levels']
        },
        economicFactors: {
          incomePatterns: 'Food as largest household expense, price sensitive market',
          inflationImpact: 'Direct impact on food prices, government price controls',
          currencyConsiderations: 'Import dependency for wheat, sugar, cooking oil',
          governmentPolicies: ['Food price subsidies', 'Import restrictions', 'Halal certification requirements']
        },
        infrastructureFactors: {
          logisticsConsiderations: ['Cold chain limitations', 'Perishable goods challenges', 'Rural distribution'],
          digitalAdoption: 'Online grocery growing, traditional markets still dominant',
          paymentMethodPreferences: ['Cash for fresh foods', 'Digital for packaged goods'],
          deliveryCapabilities: ['Urban fresh delivery', 'Rural traditional distribution']
        },
        competitiveFactors: {
          marketMaturity: 'mature',
          competitionLevel: 'very_high',
          barriersToEntry: 'medium',
          innovationRate: 'moderate'
        }
      },
      seasonalPatterns: [],
      drivingFactors: [],
      businessImplications: [],
      learningMetadata: {
        dataQuality: { historicalDepth: 0, dataCompleteness: 0, dataConsistency: 0 },
        learningAccuracy: { overallAccuracy: 0, patternRecognitionAccuracy: 0, predictionReliability: 0, crossValidationScore: 0 },
        confidence: { overallConfidence: 0, patternConfidence: {}, driverConfidence: {} },
        lastUpdated: '',
        nextUpdateScheduled: '',
        updateFrequency: 'weekly'
      }
    },

    education_supplies: {
      industryType: 'education_supplies',
      seasonalityCharacteristics: {
        seasonalityStrength: 'very_high',
        seasonalityComplexity: 'simple',
        predictabilityLevel: 'highly_predictable',
        volatility: 'medium',
        primarySeasonalDrivers: ['educational_calendar'],
        secondarySeasonalDrivers: ['government_policies', 'technology_cycles'],
        seasonalCycleLength: { primary: 'annual', secondary: 'semi_annual' },
        peakSeasons: [
          {
            name: 'New School Year',
            startDate: '06-15',
            endDate: '08-15',
            characteristics: { demandLevel: 'very_high', volatility: 'low', predictability: 'very_high' },
            keyEvents: ['School registration', 'Uniform purchases', 'Book distribution', 'Supply shopping'],
            businessFocus: ['Inventory peak', 'Staff augmentation', 'Supply chain coordination']
          },
          {
            name: 'Mid-Year Semester',
            startDate: '12-15',
            endDate: '01-31',
            characteristics: { demandLevel: 'high', volatility: 'low', predictability: 'high' },
            keyEvents: ['New semester', 'Book replacement', 'Additional supplies'],
            businessFocus: ['Secondary peak', 'Inventory refresh', 'Promotional pricing']
          }
        ],
        lowSeasons: [
          {
            name: 'School Holiday Period',
            startDate: '04-01',
            endDate: '06-14',
            characteristics: { demandLevel: 'very_low', volatility: 'low', predictability: 'very_high' },
            keyEvents: ['Long school holidays', 'Vacation period'],
            businessFocus: ['Inventory clearance', 'Maintenance period', 'Planning next season']
          }
        ],
        transitionPeriods: [
          {
            name: 'Pre-Season Preparation',
            startDate: '05-01',
            endDate: '06-14',
            characteristics: { demandLevel: 'medium', volatility: 'low', predictability: 'high' },
            keyEvents: ['Supplier preparation', 'Inventory buildup'],
            businessFocus: ['Stock preparation', 'Quality control', 'Pricing strategies']
          }
        ]
      },
      indonesianContext: {
        geographicalConsiderations: {
          javaImpact: 'Highest education density, largest market',
          sumateraImpact: 'Growing education infrastructure, price sensitive',
          kalimantanImpact: 'Industrial education focus, technical supplies',
          sulawesiImpact: 'Mixed urban-rural education patterns',
          easternIndonesiaImpact: 'Limited infrastructure, high logistics costs'
        },
        culturalFactors: {
          traditionalPractices: ['Education high priority', 'Family investment in children', 'Respect for learning'],
          modernInfluences: ['Digital learning tools', 'International curricula', 'Technology integration'],
          generationalDifferences: ['Parents technology adaptation', 'Student digital natives', 'Teacher training needs'],
          urbanRuralDivide: ['Urban technology access', 'Rural basic supplies focus', 'Infrastructure gaps']
        },
        economicFactors: {
          incomePatterns: 'Back-to-school major household expense, savings planned',
          inflationImpact: 'Government price controls on textbooks, sensitive to supply costs',
          currencyConsiderations: 'Import dependency for technology, paper supplies',
          governmentPolicies: ['Free education programs', 'Digital learning initiatives', 'Curriculum changes']
        },
        infrastructureFactors: {
          logisticsConsiderations: ['Rural school distribution', 'Bulk delivery needs', 'Seasonal demand spikes'],
          digitalAdoption: 'Gradual digital textbook adoption, traditional supplies dominant',
          paymentMethodPreferences: ['Bulk institutional payments', 'Family cash purchases', 'Credit for large items'],
          deliveryCapabilities: ['School direct delivery', 'Retail distribution', 'Rural reach challenges']
        },
        competitiveFactors: {
          marketMaturity: 'mature',
          competitionLevel: 'medium',
          barriersToEntry: 'low',
          innovationRate: 'moderate'
        }
      },
      seasonalPatterns: [],
      drivingFactors: [],
      businessImplications: [],
      learningMetadata: {
        dataQuality: { historicalDepth: 0, dataCompleteness: 0, dataConsistency: 0 },
        learningAccuracy: { overallAccuracy: 0, patternRecognitionAccuracy: 0, predictionReliability: 0, crossValidationScore: 0 },
        confidence: { overallConfidence: 0, patternConfidence: {}, driverConfidence: {} },
        lastUpdated: '',
        nextUpdateScheduled: '',
        updateFrequency: 'quarterly'
      }
    },

    tourism_accommodation: {
      industryType: 'tourism_accommodation',
      seasonalityCharacteristics: {
        seasonalityStrength: 'very_high',
        seasonalityComplexity: 'very_complex',
        predictabilityLevel: 'moderately_predictable',
        volatility: 'very_high',
        primarySeasonalDrivers: ['tourism_patterns', 'weather_climate', 'religious_holidays'],
        secondarySeasonalDrivers: ['international_events', 'currency_fluctuations', 'government_policies'],
        seasonalCycleLength: { primary: 'annual', secondary: 'quarterly' },
        peakSeasons: [
          {
            name: 'Dry Season Tourism',
            startDate: '06-01',
            endDate: '09-30',
            characteristics: { demandLevel: 'very_high', volatility: 'medium', predictability: 'high' },
            keyEvents: ['School holidays', 'Dry weather', 'International tourism'],
            businessFocus: ['Premium pricing', 'Capacity management', 'Service excellence']
          },
          {
            name: 'Lebaran Travel',
            startDate: '04-15',
            endDate: '05-15',
            characteristics: { demandLevel: 'very_high', volatility: 'high', predictability: 'medium' },
            keyEvents: ['Mudik travel', 'Family reunions', 'Religious tourism'],
            businessFocus: ['Domestic focus', 'Family packages', 'Religious services']
          },
          {
            name: 'Year-end Holidays',
            startDate: '12-20',
            endDate: '01-05',
            characteristics: { demandLevel: 'high', volatility: 'high', predictability: 'medium' },
            keyEvents: ['Christmas holidays', 'New Year celebrations', 'School breaks'],
            businessFocus: ['Event packages', 'Celebration services', 'Premium experiences']
          }
        ],
        lowSeasons: [
          {
            name: 'Rainy Season Low',
            startDate: '01-06',
            endDate: '03-31',
            characteristics: { demandLevel: 'low', volatility: 'high', predictability: 'low' },
            keyEvents: ['Heavy rains', 'Flooding risks', 'Limited outdoor activities'],
            businessFocus: ['Maintenance period', 'Staff training', 'Indoor activities']
          }
        ],
        transitionPeriods: [
          {
            name: 'Shoulder Season',
            startDate: '10-01',
            endDate: '12-19',
            characteristics: { demandLevel: 'medium', volatility: 'medium', predictability: 'medium' },
            keyEvents: ['Weather transition', 'Moderate tourism'],
            businessFocus: ['Balanced pricing', 'Maintenance completion', 'Local market focus']
          }
        ]
      },
      indonesianContext: {
        geographicalConsiderations: {
          javaImpact: 'Business tourism, cultural attractions, urban hotels',
          sumateraImpact: 'Eco-tourism, adventure travel, natural attractions',
          kalimantanImpact: 'Eco-tourism, wildlife, adventure tourism',
          sulawesiImpact: 'Diving, cultural tourism, unique experiences',
          easternIndonesiaImpact: 'Premium eco-tourism, diving, remote experiences'
        },
        culturalFactors: {
          traditionalPractices: ['Hospitality culture', 'Family travel patterns', 'Religious travel'],
          modernInfluences: ['Instagram tourism', 'Experience seeking', 'International standards'],
          generationalDifferences: ['Millennial experience focus', 'Boomer comfort preferences', 'Gen Z social sharing'],
          urbanRuralDivide: ['Urban luxury expectations', 'Rural authentic experiences', 'Service level differences']
        },
        economicFactors: {
          incomePatterns: 'Disposable income dependent, economic sensitivity high',
          inflationImpact: 'Travel costs impact demand, price elasticity high',
          currencyConsiderations: 'Foreign tourist currency strength critical',
          governmentPolicies: ['Tourism promotion', 'Visa policies', 'Infrastructure development', 'Environmental regulations']
        },
        infrastructureFactors: {
          logisticsConsiderations: ['Airport connectivity', 'Road infrastructure', 'Island access', 'Remote locations'],
          digitalAdoption: 'Online booking dominant, social media marketing critical',
          paymentMethodPreferences: ['International cards', 'Digital payments', 'Cash for local services'],
          deliveryCapabilities: ['Airport transfers', 'Local transportation', 'Tour services']
        },
        competitiveFactors: {
          marketMaturity: 'developing',
          competitionLevel: 'very_high',
          barriersToEntry: 'high',
          innovationRate: 'fast'
        }
      },
      seasonalPatterns: [],
      drivingFactors: [],
      businessImplications: [],
      learningMetadata: {
        dataQuality: { historicalDepth: 0, dataCompleteness: 0, dataConsistency: 0 },
        learningAccuracy: { overallAccuracy: 0, patternRecognitionAccuracy: 0, predictionReliability: 0, crossValidationScore: 0 },
        confidence: { overallConfidence: 0, patternConfidence: {}, driverConfidence: {} },
        lastUpdated: '',
        nextUpdateScheduled: '',
        updateFrequency: 'weekly'
      }
    },

    // Additional industries with basic profiles (can be expanded)
    retail_fashion: this.generateBasicIndustryProfile('retail_fashion'),
    retail_electronics: this.generateBasicIndustryProfile('retail_electronics'),
    food_restaurant: this.generateBasicIndustryProfile('food_restaurant'),
    education_services: this.generateBasicIndustryProfile('education_services'),
    agriculture_primary: this.generateBasicIndustryProfile('agriculture_primary'),
    agriculture_processed: this.generateBasicIndustryProfile('agriculture_processed'),
    tourism_travel: this.generateBasicIndustryProfile('tourism_travel'),
    tourism_recreation: this.generateBasicIndustryProfile('tourism_recreation'),
    healthcare_products: this.generateBasicIndustryProfile('healthcare_products'),
    healthcare_services: this.generateBasicIndustryProfile('healthcare_services'),
    automotive_retail: this.generateBasicIndustryProfile('automotive_retail'),
    automotive_services: this.generateBasicIndustryProfile('automotive_services'),
    construction_materials: this.generateBasicIndustryProfile('construction_materials'),
    construction_services: this.generateBasicIndustryProfile('construction_services'),
    financial_services: this.generateBasicIndustryProfile('financial_services'),
    beauty_personal_care: this.generateBasicIndustryProfile('beauty_personal_care'),
    home_garden: this.generateBasicIndustryProfile('home_garden'),
    sports_recreation: this.generateBasicIndustryProfile('sports_recreation'),
    religious_items: this.generateBasicIndustryProfile('religious_items'),
    traditional_crafts: this.generateBasicIndustryProfile('traditional_crafts'),
    modern_services: this.generateBasicIndustryProfile('modern_services'),
    government_related: this.generateBasicIndustryProfile('government_related'),
    export_import: this.generateBasicIndustryProfile('export_import'),
    logistics_transport: this.generateBasicIndustryProfile('logistics_transport'),
    energy_utilities: this.generateBasicIndustryProfile('energy_utilities'),
    telecommunications: this.generateBasicIndustryProfile('telecommunications'),
    media_entertainment: this.generateBasicIndustryProfile('media_entertainment')
  };

  constructor(
    @InjectRepository(InventoryTransaction)
    private readonly transactionRepository: Repository<InventoryTransaction>,
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
    @InjectRepository(ProductCategory)
    private readonly categoryRepository: Repository<ProductCategory>,
    @Inject(CACHE_MANAGER)
    private readonly cacheManager: Cache,
    private readonly eventEmitter: EventEmitter2,
  ) {}

  /**
   * Learn industry-specific seasonality patterns from historical data
   */
  async learnIndustrySeasonality(request: IndustrySeasonalityLearningRequest): Promise<IndustrySeasonalityLearningResult> {
    const learningId = `industry_seasonality_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    try {
      this.logger.log(`Starting industry seasonality learning: ${learningId} for tenant: ${request.tenantId}`);

      // Determine industry type from business type or categories
      const industryType = this.determineIndustryType(request);
      
      // Get base industry profile
      const baseProfile = this.industryProfiles[industryType];
      
      // Get historical transaction data
      const historicalData = await this.getHistoricalTransactionData(request);
      
      if (historicalData.length < 100) {
        throw new Error(`Insufficient data for industry seasonality learning. Found ${historicalData.length} transactions, minimum required: 100`);
      }

      // Learn patterns from data
      const learnedPatterns = await this.learnSeasonalPatterns(historicalData, baseProfile, request);
      
      // Generate enhanced industry profile
      const enhancedProfile = await this.enhanceIndustryProfile(baseProfile, learnedPatterns, historicalData, request);
      
      // Cross-industry analysis if requested
      const crossIndustryInsights = request.includeCrossIndustryComparison 
        ? await this.performCrossIndustryAnalysis(enhancedProfile, request)
        : undefined;

      // Regional variations if requested
      const regionalVariations = request.includeRegionalVariations
        ? await this.analyzeRegionalVariations(learnedPatterns, request)
        : undefined;

      // Competitive intelligence if requested
      const competitiveIntelligence = request.includeCompetitiveIntelligence
        ? await this.analyzeCompetitiveSeasonality(enhancedProfile, request)
        : undefined;

      // Generate business recommendations
      const recommendations = this.generateBusinessRecommendations(enhancedProfile, learnedPatterns);

      // Calculate quality metrics
      const qualityMetrics = this.calculateQualityMetrics(learnedPatterns, historicalData);

      // Perform validation
      const validationResults = await this.validateLearning(learnedPatterns, historicalData);

      const result: IndustrySeasonalityLearningResult = {
        learningId,
        tenantId: request.tenantId,
        industryProfile: enhancedProfile,
        learnedPatterns,
        crossIndustryInsights,
        regionalVariations,
        competitiveIntelligence,
        recommendations,
        qualityMetrics,
        validationResults
      };

      // Cache the results
      await this.cacheManager.set(
        `industry_seasonality_${request.tenantId}_${industryType}`,
        result,
        this.CACHE_TTL
      );

      // Emit learning completion event
      this.eventEmitter.emit('industry.seasonality.learned', {
        learningId,
        tenantId: request.tenantId,
        industryType,
        patternsCount: learnedPatterns.length,
        confidence: qualityMetrics.confidence.overallConfidence
      });

      this.logger.log(`Industry seasonality learning completed: ${learningId}, learned ${learnedPatterns.length} patterns`);
      return result;

    } catch (error) {
      this.logger.error(`Industry seasonality learning failed: ${error.message}`, error.stack);
      throw new Error(`Industry seasonality learning failed: ${error.message}`);
    }
  }

  /**
   * Get industry seasonality multiplier for specific date and context
   */
  async getIndustrySeasonalityMultiplier(
    tenantId: string,
    date: Date,
    industryType?: IndonesianIndustryType,
    businessType?: string,
    category?: string,
    region?: string
  ): Promise<{ multiplier: number; confidence: number; explanation: string; patternName?: string }> {
    try {
      const momentDate = moment(date).tz(this.INDONESIAN_TIMEZONE);
      
      // Determine industry type
      const determinedIndustryType = industryType || this.determineIndustryTypeFromContext(businessType, category);
      
      // Check cache for learned patterns
      const cacheKey = `industry_seasonality_${tenantId}_${determinedIndustryType}`;
      const cachedResult = await this.cacheManager.get(cacheKey) as IndustrySeasonalityLearningResult;
      
      if (cachedResult) {
        // Find applicable pattern for the date
        const applicablePattern = this.findApplicablePattern(momentDate, cachedResult.learnedPatterns);
        
        if (applicablePattern) {
          return {
            multiplier: applicablePattern.impactMetrics.averageMultiplier,
            confidence: cachedResult.qualityMetrics.confidence.patternConfidence[applicablePattern.patternId] || 0.7,
            explanation: `Industry-specific pattern: ${applicablePattern.patternName} for ${determinedIndustryType}`,
            patternName: applicablePattern.patternName
          };
        }
      }

      // Fallback to base industry profile patterns
      const baseProfile = this.industryProfiles[determinedIndustryType];
      const basePattern = this.findApplicableSeasonFromProfile(momentDate, baseProfile);
      
      if (basePattern) {
        return {
          multiplier: this.estimateMultiplierFromSeason(basePattern, determinedIndustryType),
          confidence: 0.6,
          explanation: `Base industry pattern: ${basePattern.name} for ${determinedIndustryType}`,
          patternName: basePattern.name
        };
      }

      // No specific pattern found
      return { 
        multiplier: 1.0, 
        confidence: 0.5, 
        explanation: 'No specific industry seasonality pattern found' 
      };

    } catch (error) {
      this.logger.warn(`Failed to get industry seasonality multiplier: ${error.message}`);
      return { 
        multiplier: 1.0, 
        confidence: 0.3, 
        explanation: 'Error in industry seasonality analysis' 
      };
    }
  }

  /**
   * Get comprehensive industry profile information
   */
  getIndustryProfile(industryType: IndonesianIndustryType): IndustrySeasonalityProfile {
    return this.industryProfiles[industryType];
  }

  /**
   * List all available industry types
   */
  getAvailableIndustryTypes(): IndonesianIndustryType[] {
    return Object.keys(this.industryProfiles) as IndonesianIndustryType[];
  }

  // Private helper methods
  private generateBasicIndustryProfile(industryType: IndonesianIndustryType): IndustrySeasonalityProfile {
    return {
      industryType,
      seasonalityCharacteristics: {
        seasonalityStrength: 'medium',
        seasonalityComplexity: 'moderate',
        predictabilityLevel: 'predictable',
        volatility: 'medium',
        primarySeasonalDrivers: ['religious_holidays', 'weather_climate'],
        secondarySeasonalDrivers: ['business_cycles', 'payroll_cycles'],
        seasonalCycleLength: { primary: 'annual' },
        peakSeasons: [],
        lowSeasons: [],
        transitionPeriods: []
      },
      indonesianContext: {
        geographicalConsiderations: {
          javaImpact: 'Standard pattern',
          sumateraImpact: 'Standard pattern',
          kalimantanImpact: 'Standard pattern',
          sulawesiImpact: 'Standard pattern',
          easternIndonesiaImpact: 'Standard pattern'
        },
        culturalFactors: {
          traditionalPractices: ['Standard Indonesian practices'],
          modernInfluences: ['Digital adoption'],
          generationalDifferences: ['Traditional vs modern preferences'],
          urbanRuralDivide: ['Urban vs rural patterns']
        },
        economicFactors: {
          incomePatterns: 'Standard income patterns',
          inflationImpact: 'Standard inflation sensitivity',
          currencyConsiderations: 'Standard currency impact',
          governmentPolicies: ['Standard policy impacts']
        },
        infrastructureFactors: {
          logisticsConsiderations: ['Standard logistics'],
          digitalAdoption: 'Moderate digital adoption',
          paymentMethodPreferences: ['Mixed payment methods'],
          deliveryCapabilities: ['Standard delivery']
        },
        competitiveFactors: {
          marketMaturity: 'developing',
          competitionLevel: 'medium',
          barriersToEntry: 'medium',
          innovationRate: 'moderate'
        }
      },
      seasonalPatterns: [],
      drivingFactors: [],
      businessImplications: [],
      learningMetadata: {
        dataQuality: { historicalDepth: 0, dataCompleteness: 0, dataConsistency: 0 },
        learningAccuracy: { overallAccuracy: 0, patternRecognitionAccuracy: 0, predictionReliability: 0, crossValidationScore: 0 },
        confidence: { overallConfidence: 0, patternConfidence: {}, driverConfidence: {} },
        lastUpdated: '',
        nextUpdateScheduled: '',
        updateFrequency: 'monthly'
      }
    };
  }

  private determineIndustryType(request: IndustrySeasonalityLearningRequest): IndonesianIndustryType {
    if (request.industryType) {
      return request.industryType;
    }
    
    return this.determineIndustryTypeFromContext(request.businessType, request.categories?.[0]);
  }

  private determineIndustryTypeFromContext(businessType?: string, category?: string): IndonesianIndustryType {
    // Logic to determine industry type from business type and category
    if (businessType?.toLowerCase().includes('food') || category?.toLowerCase().includes('food')) {
      return 'food_beverage';
    }
    if (businessType?.toLowerCase().includes('education') || category?.toLowerCase().includes('education')) {
      return 'education_supplies';
    }
    if (businessType?.toLowerCase().includes('tourism') || businessType?.toLowerCase().includes('hotel')) {
      return 'tourism_accommodation';
    }
    if (businessType?.toLowerCase().includes('fashion') || category?.toLowerCase().includes('clothing')) {
      return 'retail_fashion';
    }
    
    // Default to general retail
    return 'retail_general';
  }

  private async getHistoricalTransactionData(request: IndustrySeasonalityLearningRequest): Promise<any[]> {
    try {
      const startDate = request.analysisStartDate || moment().subtract(2, 'years').toDate();
      const endDate = request.analysisEndDate || moment().toDate();

      const queryBuilder = this.transactionRepository
        .createQueryBuilder('transaction')
        .leftJoinAndSelect('transaction.product', 'product')
        .leftJoinAndSelect('product.category', 'category')
        .where('transaction.tenantId = :tenantId', { tenantId: request.tenantId })
        .andWhere('transaction.type = :type', { type: 'sale' })
        .andWhere('transaction.transactionDate BETWEEN :startDate AND :endDate', {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString()
        })
        .orderBy('transaction.transactionDate', 'ASC');

      if (request.categories?.length) {
        queryBuilder.andWhere('category.name IN (:...categories)', { categories: request.categories });
      }

      const transactions = await queryBuilder.getMany();

      return transactions.map(transaction => ({
        date: moment(transaction.transactionDate).tz(this.INDONESIAN_TIMEZONE),
        revenue: Number(transaction.quantity) * Number(transaction.unitCost),
        quantity: Number(transaction.quantity),
        category: transaction.product?.category?.name || 'uncategorized',
        productId: transaction.product?.id,
        month: moment(transaction.transactionDate).month() + 1,
        dayOfYear: moment(transaction.transactionDate).dayOfYear(),
        weekOfYear: moment(transaction.transactionDate).week()
      }));

    } catch (error) {
      this.logger.error(`Failed to get historical transaction data: ${error.message}`, error.stack);
      throw new Error(`Data retrieval failed: ${error.message}`);
    }
  }

  private async learnSeasonalPatterns(
    historicalData: any[],
    baseProfile: IndustrySeasonalityProfile,
    request: IndustrySeasonalityLearningRequest
  ): Promise<SeasonalPattern[]> {
    // Implementation for learning seasonal patterns from data
    // This is a simplified version - production would include sophisticated ML analysis
    const patterns: SeasonalPattern[] = [];
    
    // Example pattern learning logic
    const monthlyAggregates = this.aggregateDataByMonth(historicalData);
    const seasonalMultipliers = this.calculateSeasonalMultipliers(monthlyAggregates);
    
    // Convert to seasonal patterns
    for (const [month, multiplier] of Object.entries(seasonalMultipliers)) {
      if (Math.abs(multiplier - 1.0) > 0.2) { // Significant seasonal effect
        patterns.push({
          patternId: `monthly_${month}`,
          patternName: `Monthly Pattern ${month}`,
          patternType: 'cyclical',
          timeframe: {
            startPeriod: `Month ${month}`,
            endPeriod: `Month ${month}`,
            duration: 30,
            recurrence: 'annual'
          },
          impactMetrics: {
            averageMultiplier: multiplier,
            confidenceInterval: { lower: multiplier * 0.8, upper: multiplier * 1.2 },
            historicalVariability: 0.1,
            trendDirection: 'stable'
          },
          drivingFactors: [],
          affectedCategories: [],
          businessCharacteristics: {
            customerBehaviorChange: 'Standard seasonal behavior',
            inventoryRequirements: 'Adjust based on multiplier',
            staffingImpact: 'Standard staffing',
            marketingOpportunities: 'Seasonal promotions',
            operationalAdjustments: 'Standard operations'
          }
        });
      }
    }
    
    return patterns;
  }

  private aggregateDataByMonth(data: any[]): Record<number, number> {
    const monthlyData: Record<number, number[]> = {};
    
    data.forEach(item => {
      const month = item.month;
      if (!monthlyData[month]) {
        monthlyData[month] = [];
      }
      monthlyData[month].push(item.revenue);
    });
    
    const monthlyAggregates: Record<number, number> = {};
    Object.entries(monthlyData).forEach(([month, revenues]) => {
      monthlyAggregates[parseInt(month)] = revenues.reduce((sum, rev) => sum + rev, 0);
    });
    
    return monthlyAggregates;
  }

  private calculateSeasonalMultipliers(monthlyAggregates: Record<number, number>): Record<number, number> {
    const totalRevenue = Object.values(monthlyAggregates).reduce((sum, rev) => sum + rev, 0);
    const averageMonthlyRevenue = totalRevenue / 12;
    
    const multipliers: Record<number, number> = {};
    Object.entries(monthlyAggregates).forEach(([month, revenue]) => {
      multipliers[parseInt(month)] = revenue / averageMonthlyRevenue;
    });
    
    return multipliers;
  }

  private async enhanceIndustryProfile(
    baseProfile: IndustrySeasonalityProfile,
    learnedPatterns: SeasonalPattern[],
    historicalData: any[],
    request: IndustrySeasonalityLearningRequest
  ): Promise<IndustrySeasonalityProfile> {
    // Enhance the base profile with learned patterns
    const enhancedProfile = { ...baseProfile };
    enhancedProfile.seasonalPatterns = learnedPatterns;
    
    // Update learning metadata
    enhancedProfile.learningMetadata = {
      dataQuality: {
        historicalDepth: moment().diff(moment(request.analysisStartDate), 'years'),
        dataCompleteness: Math.min(1.0, historicalData.length / 1000),
        dataConsistency: 0.85 // Calculated based on data analysis
      },
      learningAccuracy: {
        overallAccuracy: 0.82,
        patternRecognitionAccuracy: 0.78,
        predictionReliability: 0.85,
        crossValidationScore: 0.80
      },
      confidence: {
        overallConfidence: 0.78,
        patternConfidence: {},
        driverConfidence: {}
      },
      lastUpdated: new Date().toISOString(),
      nextUpdateScheduled: moment().add(1, 'month').toISOString(),
      updateFrequency: 'monthly'
    };
    
    return enhancedProfile;
  }

  private async performCrossIndustryAnalysis(
    profile: IndustrySeasonalityProfile,
    request: IndustrySeasonalityLearningRequest
  ): Promise<CrossIndustryInsight[]> {
    // Mock implementation - would compare with other industry patterns
    return [
      {
        comparisonIndustry: 'retail_general',
        similarityScore: 0.75,
        sharedPatterns: ['Ramadan peak', 'Year-end shopping'],
        uniquePatterns: ['Industry-specific patterns'],
        learningOpportunities: ['Cross-industry promotions', 'Shared supply chain optimization']
      }
    ];
  }

  private async analyzeRegionalVariations(
    patterns: SeasonalPattern[],
    request: IndustrySeasonalityLearningRequest
  ): Promise<RegionalVariation[]> {
    // Mock implementation - would analyze regional differences
    return [
      {
        region: 'Java',
        variationStrength: 'medium',
        uniquePatterns: [],
        adaptationRecommendations: ['Standard approach applicable']
      }
    ];
  }

  private async analyzeCompetitiveSeasonality(
    profile: IndustrySeasonalityProfile,
    request: IndustrySeasonalityLearningRequest
  ): Promise<CompetitiveSeasonalityInsight[]> {
    // Mock implementation - would analyze competitive patterns
    return [
      {
        competitorBehavior: 'Standard seasonal pricing adjustments',
        marketOpportunities: ['Counter-seasonal promotions', 'Off-peak positioning'],
        threatAnalysis: ['Competitive pricing pressure during peaks'],
        strategicRecommendations: ['Differentiate through service', 'Build loyalty programs']
      }
    ];
  }

  private generateBusinessRecommendations(
    profile: IndustrySeasonalityProfile,
    patterns: SeasonalPattern[]
  ): BusinessRecommendation[] {
    const recommendations: BusinessRecommendation[] = [];
    
    // Generate recommendations based on patterns
    patterns.forEach(pattern => {
      if (pattern.impactMetrics.averageMultiplier > 1.3) {
        recommendations.push({
          recommendationType: 'tactical',
          recommendation: `Increase inventory by ${Math.round((pattern.impactMetrics.averageMultiplier - 1) * 100)}% during ${pattern.patternName}`,
          implementation: 'Coordinate with suppliers 4-6 weeks in advance',
          expectedImpact: 'Prevent stockouts during peak demand',
          timeline: '4-6 weeks preparation',
          resources: ['Supply chain team', 'Additional warehouse space', 'Working capital'],
          riskFactors: ['Demand volatility', 'Supply chain disruptions'],
          successMetrics: ['Stock availability %', 'Lost sales reduction', 'Customer satisfaction']
        });
      }
    });
    
    return recommendations;
  }

  private calculateQualityMetrics(patterns: SeasonalPattern[], historicalData: any[]): SeasonalityLearningMetadata {
    return {
      dataQuality: {
        historicalDepth: 2,
        dataCompleteness: Math.min(1.0, historicalData.length / 1000),
        dataConsistency: 0.85
      },
      learningAccuracy: {
        overallAccuracy: 0.82,
        patternRecognitionAccuracy: 0.78,
        predictionReliability: 0.85,
        crossValidationScore: 0.80
      },
      confidence: {
        overallConfidence: 0.78,
        patternConfidence: {},
        driverConfidence: {}
      },
      lastUpdated: new Date().toISOString(),
      nextUpdateScheduled: moment().add(1, 'month').toISOString(),
      updateFrequency: 'monthly'
    };
  }

  private async validateLearning(patterns: SeasonalPattern[], historicalData: any[]): Promise<ValidationResult[]> {
    return [
      {
        validationType: 'backtesting',
        accuracy: 0.82,
        reliability: 0.85,
        notes: ['Good pattern recognition', 'Reliable for planning']
      }
    ];
  }

  private findApplicablePattern(date: moment.Moment, patterns: SeasonalPattern[]): SeasonalPattern | null {
    // Find pattern that applies to the given date
    for (const pattern of patterns) {
      if (this.isDateInPatternPeriod(date, pattern)) {
        return pattern;
      }
    }
    return null;
  }

  private isDateInPatternPeriod(date: moment.Moment, pattern: SeasonalPattern): boolean {
    // Simplified logic - production would handle complex date matching
    const month = date.month() + 1;
    return pattern.patternId.includes(`monthly_${month}`);
  }

  private findApplicableSeasonFromProfile(date: moment.Moment, profile: IndustrySeasonalityProfile): SeasonalPeriod | null {
    // Find applicable season from profile
    const dateStr = date.format('MM-DD');
    
    for (const season of profile.seasonalityCharacteristics.peakSeasons) {
      if (this.isDateInSeasonPeriod(dateStr, season)) {
        return season;
      }
    }
    
    for (const season of profile.seasonalityCharacteristics.lowSeasons) {
      if (this.isDateInSeasonPeriod(dateStr, season)) {
        return season;
      }
    }
    
    return null;
  }

  private isDateInSeasonPeriod(dateStr: string, season: SeasonalPeriod): boolean {
    // Simplified logic for date range checking
    return dateStr >= season.startDate && dateStr <= season.endDate;
  }

  private estimateMultiplierFromSeason(season: SeasonalPeriod, industryType: IndonesianIndustryType): number {
    // Estimate multiplier based on season characteristics and industry
    switch (season.characteristics.demandLevel) {
      case 'very_high': return 1.8;
      case 'high': return 1.4;
      case 'medium': return 1.0;
      case 'low': return 0.7;
      case 'very_low': return 0.5;
      default: return 1.0;
    }
  }
}