/**
 * PHASE 7.1.4.1: Container Registry Management Interfaces ðŸ“¦
 * 
 * Comprehensive TypeScript interfaces untuk container registry management,
 * image lifecycle, security scanning, dan Indonesian registry optimization.
 * Supports advanced container registry orchestration, vulnerability management,
 * multi-registry federation, dan enterprise-grade registry governance
 * dengan sophisticated Indonesian business context integration.
 */

// Core container registry management interfaces

export interface ContainerRegistryManagementRequest {
  tenantId: string;
  registryScope: ContainerRegistryScope;
  registryInfrastructure: ContainerRegistryInfrastructure;
  imageLifecycleManagement: ImageLifecycleManagement;
  registrySecurity: ContainerRegistrySecurity;
  indonesianRegistryConfiguration: IndonesianRegistryConfiguration;
  registryFederation: RegistryFederation;
  vulnerabilityManagement: VulnerabilityManagement;
  registryMonitoring: ContainerRegistryMonitoring;
  registryGovernance: ContainerRegistryGovernance;
  enterpriseRegistryConfiguration: EnterpriseRegistryConfiguration;
}

export interface ContainerRegistryScope {
  scopeId: string;
  registryType: 'harbor_registry' | 'docker_registry' | 'ecr_registry' | 'gcr_registry' | 'indonesian_optimized_registry';
  registryServices: ContainerRegistryService[];
  registryObjectives: ContainerRegistryObjective[];
  registryCriteria: ContainerRegistryCriterion[];
  registryBaselines: ContainerRegistryBaseline[];
  registryComplexity: ContainerRegistryComplexity;
  indonesianRegistryPriorities: IndonesianRegistryPriority[];
}

export interface ContainerRegistryService {
  serviceId: string;
  serviceName: string;
  serviceType: 'registry_core' | 'image_scanning' | 'artifact_management' | 'registry_security' | 'distribution_management';
  registrySpecs: ContainerRegistrySpec[];
  registryCapabilities: ContainerRegistryCapability[];
  registryRequirements: ContainerRegistryRequirement[];
  registryExpectations: ContainerRegistryExpectation[];
  indonesianRegistryFactors: IndonesianRegistryFactor[];
}

export interface ContainerRegistrySpec {
  specId: string;
  specName: string;
  specType: 'registry_config' | 'image_config' | 'security_config' | 'distribution_config' | 'compliance_config';
  inputSchema: ContainerRegistryInputSchema;
  outputSchema: ContainerRegistryOutputSchema;
  registryScenarios: ContainerRegistryScenario[];
  registryRules: ContainerRegistryRule[];
  indonesianRegistrySpecFactors: IndonesianRegistrySpecFactor[];
}

export interface ContainerRegistryInputSchema {
  schemaType: 'registry_input' | 'image_input' | 'security_input' | 'distribution_input' | 'compliance_input';
  requiredFields: ContainerRegistryField[];
  optionalFields: ContainerRegistryField[];
  registryValidation: ContainerRegistryValidation[];
  registryLogicValidation: ContainerRegistryLogicValidation[];
  registryConfigurationValidation: ContainerRegistryConfigurationValidation[];
  indonesianRegistryInputFactors: string[];
}

export interface ContainerRegistryField {
  fieldName: string;
  fieldType: 'registry_resource' | 'image_configuration' | 'security_policy' | 'distribution_rule' | 'compliance_setting';
  fieldDescription: string;
  validationRules: ContainerRegistryFieldValidationRule[];
  registryConstraints: ContainerRegistryConstraint[];
  imageConstraints: ContainerImageConstraint[];
  indonesianRegistryFieldFactors: string[];
}

export interface ContainerRegistryFieldValidationRule {
  ruleType: 'registry_validation' | 'image_validation' | 'security_validation' | 'distribution_validation' | 'compliance_validation';
  ruleDescription: string;
  validationLogic: string[];
  errorHandling: string[];
  correctionSuggestions: string[];
  indonesianRegistryValidationFactors: string[];
}

export interface ContainerRegistryConstraint {
  constraintType: 'registry_constraint' | 'image_constraint' | 'security_constraint' | 'distribution_constraint' | 'compliance_constraint';
  constraintDescription: string;
  constraintLogic: string[];
  violationHandling: string[];
  registryImpact: string[];
  indonesianRegistryConstraintFactors: string[];
}

export interface ContainerImageConstraint {
  constraintType: 'image_size_constraint' | 'vulnerability_constraint' | 'compliance_constraint' | 'lifecycle_constraint';
  constraintDescription: string;
  imageContext: string[];
  validationMethod: string[];
  adaptationStrategy: string[];
  complianceRequirements: string[];
}

export interface ContainerRegistryValidation {
  validationType: 'registry_configuration_validation' | 'image_validation' | 'security_validation' | 'distribution_validation' | 'compliance_validation';
  validationDescription: string;
  validationCriteria: ContainerRegistryCriterion[];
  registryTests: ContainerRegistryTest[];
  registryMetrics: ContainerRegistryMetric[];
  indonesianRegistryValidationFactors: string[];
}

export interface ContainerRegistryTest {
  testType: 'registry_connectivity_test' | 'image_push_test' | 'security_scan_test' | 'distribution_test' | 'compliance_test';
  testDescription: string;
  testCriteria: string;
  expectedOutcome: string;
  registryInterpretation: string[];
  complianceRequirements: string[];
}

export interface ContainerRegistryMetric {
  metricType: 'registry_performance' | 'image_size' | 'vulnerability_count' | 'distribution_speed' | 'compliance_score';
  metricName: string;
  targetValue: number;
  currentValue: number;
  optimizationMethod: string[];
  improvementActions: string[];
}

export interface ContainerRegistryLogicValidation {
  validationType: 'registry_logic_validation' | 'image_logic_validation' | 'security_logic_validation' | 'distribution_logic_validation';
  validationDescription: string;
  registryRules: ContainerRegistryRule[];
  validationTests: ContainerRegistryValidationTest[];
  expectedBehavior: ContainerRegistryExpectedBehavior[];
  indonesianRegistryLogicFactors: string[];
}

export interface ContainerRegistryRule {
  ruleType: 'registry_rule' | 'image_rule' | 'security_rule' | 'distribution_rule' | 'indonesian_rule';
  ruleDescription: string;
  ruleImplementation: string[];
  ruleValidation: string[];
  ruleExceptions: string[];
  businessJustification: string[];
}

export interface ContainerRegistryValidationTest {
  testName: string;
  testType: 'unit_test' | 'integration_test' | 'registry_test' | 'performance_test' | 'indonesian_test';
  testDescription: string;
  testInputs: any;
  expectedOutputs: any;
  toleranceLevel: number;
  validationCriteria: string[];
}

export interface ContainerRegistryExpectedBehavior {
  behaviorType: 'registry_startup_behavior' | 'image_behavior' | 'security_behavior' | 'distribution_behavior' | 'indonesian_behavior';
  behaviorDescription: string;
  expectedResults: ContainerRegistryExpectedResult[];
  validationMethod: string[];
  businessImplications: string[];
  indonesianRegistryBehaviorFactors: string[];
}

export interface ContainerRegistryExpectedResult {
  resultType: 'registry_result' | 'image_result' | 'security_result' | 'distribution_result' | 'indonesian_result';
  resultDescription: string;
  resultCriteria: string[];
  measurementMethod: string[];
  acceptanceThreshold: number;
  indonesianRegistryResultFactors: string[];
}

export interface ContainerRegistryConfigurationValidation {
  validationType: 'registry_context_validation' | 'image_validation' | 'security_validation' | 'distribution_validation' | 'compliance_validation';
  validationDescription: string;
  registryFactors: ContainerRegistryFactor[];
  validationCriteria: string[];
  adaptationRequirements: string[];
  complianceStandards: string[];
}

export interface ContainerRegistryFactor {
  factorType: 'registry_factor' | 'image_factor' | 'security_factor' | 'distribution_factor' | 'indonesian_factor';
  factorDescription: string;
  registryImpact: string[];
  validationMethod: string[];
  adaptationStrategy: string[];
  monitoringRequirements: string[];
}

export interface ContainerRegistryOutputSchema {
  schemaType: 'registry_output' | 'image_output' | 'security_output' | 'distribution_output' | 'compliance_output';
  outputFields: ContainerRegistryOutputField[];
  formatValidation: ContainerRegistryFormatValidation[];
  registryLogicValidation: ContainerRegistryLogicValidation[];
  registryValidation: ContainerRegistryValidation[];
  indonesianRegistryOutputFactors: string[];
}

export interface ContainerRegistryOutputField {
  fieldName: string;
  fieldType: 'registry_data' | 'image_data' | 'security_data' | 'distribution_data' | 'compliance_data';
  fieldDescription: string;
  validationRules: string[];
  businessInterpretation: string[];
  registryConsiderations: string[];
}

export interface ContainerRegistryFormatValidation {
  validationType: 'registry_configuration_validation' | 'docker_validation' | 'oci_validation' | 'indonesian_validation';
  validationDescription: string;
  validationRules: string[];
  errorHandling: string[];
  qualityAssurance: string[];
  indonesianRegistryFormatFactors: string[];
}

export interface ContainerRegistryScenario {
  scenarioId: string;
  scenarioName: string;
  scenarioType: 'development_scenario' | 'staging_scenario' | 'production_scenario' | 'disaster_scenario' | 'indonesian_scenario';
  scenarioDescription: string;
  registryData: ContainerRegistryData;
  expectedOutcomes: ContainerRegistryExpectedOutcome[];
  validationCriteria: string[];
  registryCriteria: ContainerRegistryCriterion[];
  indonesianRegistryScenarioFactors: IndonesianRegistryScenarioFactor[];
}

export interface ContainerRegistryData {
  dataType: 'registry_data' | 'image_data' | 'security_data' | 'distribution_data' | 'compliance_data';
  dataSize: number;
  registryComplexity: number; // 0-100
  registryCharacteristics: ContainerRegistryCharacteristic[];
  temporalCoverage: ContainerRegistryTemporalCoverage;
  businessContext: ContainerRegistryBusinessContext[];
  indonesianRegistryDataFactors: string[];
}

export interface ContainerRegistryCharacteristic {
  characteristicType: 'registry_patterns' | 'image_patterns' | 'security_patterns' | 'distribution_patterns' | 'indonesian_patterns';
  characteristicDescription: string;
  characteristicValue: any;
  businessRelevance: string[];
  validationRequirements: string[];
}

export interface ContainerRegistryTemporalCoverage {
  startDate: Date;
  endDate: Date;
  registryDuration: string;
  availabilityRequirement: number; // percentage
  temporalPatterns: string[];
  maintenanceWindows: string[];
}

export interface ContainerRegistryBusinessContext {
  contextType: 'business_context' | 'technical_context' | 'security_context' | 'regulatory_context' | 'indonesian_context';
  contextDescription: string;
  contextFactors: string[];
  businessImpact: string[];
  validationRequirements: string[];
}

export interface ContainerRegistryExpectedOutcome {
  outcomeType: 'registry_outcome' | 'image_outcome' | 'security_outcome' | 'distribution_outcome' | 'indonesian_outcome';
  outcomeDescription: string;
  successCriteria: string[];
  measurementMethod: string[];
  toleranceLevel: number;
  businessImplications: string[];
}

export interface ContainerRegistryCriterion {
  criterionType: 'registry_criterion' | 'image_criterion' | 'security_criterion' | 'distribution_criterion' | 'indonesian_criterion';
  criterionDescription: string;
  targetValue: number;
  thresholdValue: number;
  measurementUnit: string;
  monitoringStrategy: string[];
}

export interface ContainerRegistryCapability {
  capabilityType: 'registry_capability' | 'image_capability' | 'security_capability' | 'distribution_capability' | 'compliance_capability';
  capabilityDescription: string;
  registryRange: ContainerRegistryRange;
  useCases: string[];
  limitations: string[];
  businessApplications: string[];
}

export interface ContainerRegistryRange {
  minimumCapacity: number;
  typicalCapacity: number;
  maximumCapacity: number;
  capacityFactors: string[];
  improvementStrategies: string[];
}

export interface ContainerRegistryRequirement {
  requirementType: 'registry_requirement' | 'image_requirement' | 'security_requirement' | 'distribution_requirement' | 'compliance_requirement';
  requirementDescription: string;
  minimumRequirements: ContainerRegistryRequirementSpec[];
  optimalRequirements: ContainerRegistryRequirementSpec[];
  validationCriteria: string[];
  indonesianRegistryRequirementFactors: string[];
}

export interface ContainerRegistryRequirementSpec {
  specType: 'registry_spec' | 'image_spec' | 'security_spec' | 'distribution_spec' | 'compliance_spec';
  specDescription: string;
  specValue: any;
  specUnit: string;
  validationMethod: string[];
  monitoringStrategy: string[];
}

export interface ContainerRegistryExpectation {
  expectationType: 'registry_expectation' | 'image_expectation' | 'security_expectation' | 'distribution_expectation' | 'compliance_expectation';
  expectationDescription: string;
  targetMetrics: ContainerRegistryTargetMetric[];
  measurementFrequency: string;
  reportingRequirements: string[];
  indonesianRegistryExpectationFactors: string[];
}

export interface ContainerRegistryTargetMetric {
  metricName: string;
  targetValue: number;
  currentValue: number;
  registryGap: number;
  improvementPlan: string[];
  monitoringFrequency: string;
}

export interface IndonesianRegistryFactor {
  factorType: 'indonesian_registry_factor' | 'regulatory_registry_factor' | 'business_registry_factor' | 'cultural_registry_factor';
  factorDescription: string;
  registryServiceImpact: string[];
  adaptationRequirements: string[];
  validationStrategy: string[];
  complianceRequirements: string[];
}

export interface ContainerRegistryObjective {
  objectiveId: string;
  objectiveName: string;
  objectiveType: 'registry_objective' | 'image_objective' | 'security_objective' | 'distribution_objective' | 'indonesian_objective';
  objectiveDescription: string;
  targetMetrics: ContainerRegistryTargetMetric[];
  successCriteria: ContainerRegistrySuccessCriterion[];
  businessJustification: string[];
  indonesianRegistryObjectiveFactors: string[];
}

export interface ContainerRegistrySuccessCriterion {
  criterionId: string;
  criterionName: string;
  criterionType: 'registry_criterion' | 'image_criterion' | 'security_criterion' | 'distribution_criterion' | 'business_criterion';
  targetValue: number;
  measurementMethod: string;
  acceptanceThreshold: number;
  monitoringFrequency: string;
}

export interface ContainerRegistryBaseline {
  baselineId: string;
  baselineName: string;
  baselineType: 'registry_baseline' | 'image_baseline' | 'security_baseline' | 'distribution_baseline' | 'compliance_baseline';
  baselineMetrics: ContainerRegistryBaselineMetric[];
  establishedDate: Date;
  validityPeriod: string;
  reviewFrequency: string;
  indonesianRegistryBaselineFactors: string[];
}

export interface ContainerRegistryBaselineMetric {
  metricId: string;
  metricName: string;
  metricType: 'registry_metric' | 'image_metric' | 'security_metric' | 'distribution_metric' | 'business_metric';
  baselineValue: number;
  measurementUnit: string;
  varianceThreshold: number;
  monitoringStrategy: string[];
}

export interface ContainerRegistryComplexity {
  complexityLevel: 'low' | 'medium' | 'high' | 'enterprise' | 'indonesian_specific';
  complexityScore: number; // 0-100
  complexityFactors: ContainerRegistryComplexityFactor[];
  registryRequirements: ContainerRegistryManagementRequirement[];
  resourceImplications: ContainerRegistryResourceImplication[];
  indonesianRegistryComplexityFactors: string[];
}

export interface ContainerRegistryComplexityFactor {
  factorType: 'technical_complexity' | 'business_complexity' | 'security_complexity' | 'operational_complexity';
  factorDescription: string;
  complexityContribution: number; // 0-100
  mitigationStrategies: string[];
  managementApproach: string[];
}

export interface ContainerRegistryManagementRequirement {
  requirementType: 'technical_management' | 'business_management' | 'security_management' | 'compliance_management';
  requirementDescription: string;
  managementLevel: 'basic' | 'intermediate' | 'advanced' | 'expert';
  skillRequirements: string[];
  toolRequirements: string[];
}

export interface ContainerRegistryResourceImplication {
  implicationType: 'compute_implication' | 'storage_implication' | 'network_implication' | 'management_implication';
  implicationDescription: string;
  resourceImpact: number; // percentage increase
  costImplication: number;
  scalabilityImpact: string[];
}

export interface IndonesianRegistryPriority {
  priorityId: string;
  priorityName: string;
  priorityType: 'business_priority' | 'technical_priority' | 'security_priority' | 'regulatory_priority';
  priorityDescription: string;
  businessValue: number; // 0-100
  implementationComplexity: number; // 0-100
  regulatoryAlignment: number; // 0-100
  culturalAdaptation: string[];
}

export interface IndonesianRegistrySpecFactor {
  factorType: 'indonesian_registry_spec_factor' | 'regulatory_factor' | 'business_factor' | 'cultural_factor';
  factorDescription: string;
  specImpact: string[];
  validationRequirements: string[];
  adaptationStrategy: string[];
  complianceRequirements: string[];
}

export interface IndonesianRegistryScenarioFactor {
  factorType: 'indonesian_registry_scenario_factor' | 'regulatory_scenario_factor' | 'business_scenario_factor' | 'cultural_scenario_factor';
  factorDescription: string;
  scenarioImpact: string[];
  validationRequirements: string[];
  adaptationStrategy: string[];
  complianceRequirements: string[];
}

// Container registry result interfaces

export interface ContainerRegistryManagementResult {
  managementId: string;
  tenantId: string;
  managementTimestamp: Date;
  managementSummary: ContainerRegistryManagementSummary;
  registryInfrastructureResults: ContainerRegistryInfrastructureResult[];
  imageLifecycleResults: ImageLifecycleResult[];
  registrySecurityResults: ContainerRegistrySecurityResult[];
  indonesianRegistryResults: IndonesianRegistryResult[];
  registryFederationResults: RegistryFederationResult[];
  vulnerabilityManagementResults: VulnerabilityManagementResult[];
  managementMetadata: ContainerRegistryManagementMetadata;
}

export interface ContainerRegistryManagementSummary {
  overallRegistryManagementScore: number; // 0-100
  registryInfrastructureHealth: number; // 0-100
  imageLifecycleEfficiency: number; // 0-100
  registrySecurityScore: number; // 0-100
  indonesianRegistryAlignment: number; // 0-100
  registryFederationScore: number; // 0-100
  vulnerabilityManagementScore: number; // 0-100
  criticalRegistryIssuesCount: number;
  registryOptimizationOpportunitiesCount: number;
  registryReliability: number; // 0-100
  recommendedRegistryActions: string[];
}

// Additional interfaces for specific container registry components

export interface ContainerRegistryInfrastructure {
  registryType: 'harbor_registry' | 'docker_registry' | 'ecr_registry' | 'gcr_registry' | 'hybrid_registry';
  registryConfiguration: RegistryConfiguration;
  storageBackend: StorageBackend;
  registryNetwork: RegistryNetwork;
  registryIntegration: RegistryIntegration;
}

export interface ImageLifecycleManagement {
  imagePolicies: ImagePolicy[];
  lifecycleRules: LifecycleRule[];
  imagePromotion: ImagePromotion;
  retentionPolicies: RetentionPolicy[];
  imageCleaning: ImageCleaning;
  indonesianImageOptimization: IndonesianImageOptimization;
}

export interface ContainerRegistrySecurity {
  accessControl: AccessControl;
  imageScanning: ImageScanning;
  signatureVerification: SignatureVerification;
  securityPolicies: SecurityPolicy[];
  auditLogging: AuditLogging;
  indonesianSecurityCompliance: IndonesianSecurityCompliance;
}

export interface IndonesianRegistryConfiguration {
  regionalOptimization: RegionalOptimization;
  dataResidencyRequirements: DataResidencyRequirements;
  regulatoryCompliance: RegulatoryCompliance;
  businessHoursAdaptation: BusinessHoursAdaptation;
  culturalEventHandling: CulturalEventHandling;
}

export interface RegistryFederation {
  multiRegistrySupport: MultiRegistrySupport;
  registryMirroring: RegistryMirroring;
  contentSynchronization: ContentSynchronization;
  failoverConfiguration: FailoverConfiguration;
  loadBalancing: LoadBalancing;
}

export interface VulnerabilityManagement {
  scanningEngine: ScanningEngine;
  vulnerabilityDatabase: VulnerabilityDatabase;
  riskAssessment: RiskAssessment;
  remediationWorkflow: RemediationWorkflow;
  complianceReporting: ComplianceReporting;
}

// Additional supporting interfaces would continue here...
// (Interfaces for monitoring, governance, enterprise configuration, etc.)

export interface ContainerRegistryMonitoring {
  registryMetrics: RegistryMetric[];
  performanceMonitoring: PerformanceMonitoring;
  securityMonitoring: SecurityMonitoring;
  businessMetrics: BusinessMetric[];
  indonesianMonitoringRequirements: IndonesianMonitoringRequirement[];
}

export interface ContainerRegistryGovernance {
  governancePolicies: GovernancePolicy[];
  complianceFramework: ComplianceFramework;
  auditTrail: AuditTrail;
  changeManagement: ChangeManagement;
  riskManagement: RiskManagement;
}

export interface EnterpriseRegistryConfiguration {
  multiTenantSupport: MultiTenantSupport;
  enterpriseIntegrations: EnterpriseIntegration[];
  scalabilityConfiguration: ScalabilityConfiguration;
  disasterRecovery: DisasterRecovery;
  globalDistribution: GlobalDistribution;
}