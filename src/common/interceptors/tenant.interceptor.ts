import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  BadRequestException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\n\nexport const SKIP_TENANT_CHECK = 'skipTenantCheck';\n\n@Injectable()\nexport class TenantInterceptor implements NestInterceptor {\n  constructor(private reflector: Reflector) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest<Request>();\n    \n    // Check if tenant check should be skipped (for health endpoints, auth, etc.)\n    const skipTenantCheck = this.reflector.get<boolean>(\n      SKIP_TENANT_CHECK,\n      context.getHandler(),\n    ) || this.reflector.get<boolean>(\n      SKIP_TENANT_CHECK,\n      context.getClass(),\n    );\n\n    if (skipTenantCheck) {\n      return next.handle();\n    }\n\n    // Extract tenant ID from headers\n    const tenantId = request.headers['x-tenant-id'] as string;\n    \n    if (!tenantId) {\n      throw new BadRequestException({\n        code: 'TENANT_ID_REQUIRED',\n        message: 'Tenant ID is required in x-tenant-id header',\n      });\n    }\n\n    // Validate tenant ID format (UUID)\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(tenantId)) {\n      throw new BadRequestException({\n        code: 'INVALID_TENANT_ID',\n        message: 'Tenant ID must be a valid UUID',\n      });\n    }\n\n    // If user is authenticated, verify they belong to this tenant\n    const user = (request as any).user;\n    if (user && user.tenantId && user.tenantId !== tenantId) {\n      throw new UnauthorizedException({\n        code: 'TENANT_MISMATCH',\n        message: 'User does not belong to the specified tenant',\n      });\n    }\n\n    // Store tenant ID in request for later use\n    (request as any).tenantId = tenantId;\n\n    return next.handle();\n  }\n}"