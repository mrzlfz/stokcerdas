import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(LoggingInterceptor.name);\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const ctx = context.switchToHttp();\n    const request = ctx.getRequest<Request>();\n    const response = ctx.getResponse<Response>();\n    const { method, url, headers, body, query, params } = request;\n    const userAgent = headers['user-agent'] || '';\n    const ip = headers['x-forwarded-for'] || request.connection.remoteAddress;\n    const tenantId = headers['x-tenant-id'];\n    const userId = (request as any).user?.id;\n    \n    const startTime = Date.now();\n    const requestId = headers['x-request-id'] || this.generateRequestId();\n    \n    // Set request ID in response headers\n    response.setHeader('x-request-id', requestId);\n\n    this.logger.log(\n      `→ ${method} ${url}`,\n      {\n        requestId,\n        tenantId,\n        userId,\n        ip,\n        userAgent,\n        query,\n        params,\n        body: this.sanitizeBody(body),\n      },\n    );\n\n    return next.handle().pipe(\n      tap(\n        (data) => {\n          const duration = Date.now() - startTime;\n          this.logger.log(\n            `← ${method} ${url} ${response.statusCode} - ${duration}ms`,\n            {\n              requestId,\n              tenantId,\n              userId,\n              statusCode: response.statusCode,\n              duration,\n              responseSize: JSON.stringify(data).length,\n            },\n          );\n        },\n        (error) => {\n          const duration = Date.now() - startTime;\n          this.logger.error(\n            `← ${method} ${url} ERROR - ${duration}ms`,\n            {\n              requestId,\n              tenantId,\n              userId,\n              duration,\n              error: error.message,\n              stack: error.stack,\n            },\n          );\n        },\n      ),\n    );\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private sanitizeBody(body: any): any {\n    if (!body) return body;\n    \n    const sanitized = { ...body };\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'authorization'];\n    \n    for (const field of sensitiveFields) {\n      if (sanitized[field]) {\n        sanitized[field] = '[REDACTED]';\n      }\n    }\n    \n    return sanitized;\n  }\n}"