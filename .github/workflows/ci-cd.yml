name: StokCerdas CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: 18
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Linting and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier Check
        run: npm run format:check

      - name: TypeScript Type Check
        run: npm run typecheck

      - name: Security Audit
        run: npm audit --audit-level=moderate

  # Unit and Integration Tests
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: stokcerdas_test
          POSTGRES_USER: stokcerdas
          POSTGRES_PASSWORD: stokcerdas_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://stokcerdas:stokcerdas_password@localhost:5432/stokcerdas_test
          REDIS_URL: redis://localhost:6379

      - name: Run Integration Tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://stokcerdas:stokcerdas_password@localhost:5432/stokcerdas_test
          REDIS_URL: redis://localhost:6379

      - name: Generate Coverage Report
        run: npm run test:coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # End-to-End Tests
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Start Development Environment
        run: docker-compose up -d
        env:
          COMPOSE_FILE: docker-compose.yml

      - name: Wait for Services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
      - name: Run Database Migrations
        run: npm run migration:run
        env:
          DATABASE_URL: postgresql://stokcerdas:stokcerdas_password@localhost:5432/stokcerdas_dev

      - name: Run E2E Tests
        run: npm run test:e2e
        env:
          APP_URL: http://localhost:3000

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

  # Build Docker Image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: stokcerdas/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/stokcerdas
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f

      - name: Health Check
        run: |
          echo "Waiting for staging deployment..."
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1

      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Staging deployment successful! üéâ'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/stokcerdas
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f

      - name: Health Check
        run: |
          echo "Waiting for production deployment..."
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! üöÄ'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Docker Image
            `stokcerdas/api:${{ github.ref_name }}`
          draft: false
          prerelease: false

  # Notification on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, docker-build]
    if: failure()
    
    steps:
      - name: Notify Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'CI/CD Pipeline failed! ‚ùå'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}